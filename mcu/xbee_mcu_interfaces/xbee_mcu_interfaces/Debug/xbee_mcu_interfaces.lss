
xbee_mcu_interfaces.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001be  00800100  000003c8  0000045c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000043  008002be  008002be  0000061a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000061a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000064c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dec  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ed  00000000  00000000  00001540  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007c6  00000000  00000000  00001f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  000026f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000545  00000000  00000000  000028b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000596  00000000  00000000  00002df5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000338b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ec       	ldi	r30, 0xC8	; 200
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 3b       	cpi	r26, 0xBE	; 190
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	ae eb       	ldi	r26, 0xBE	; 190
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 30       	cpi	r26, 0x01	; 1
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c8 01 	call	0x390	; 0x390 <main>
  9e:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <spi_master_init>:
	{
		spi_xmit(sData[i]);
	}
	
	spi_set_ss_n(1);
}
  a6:	8c e2       	ldi	r24, 0x2C	; 44
  a8:	84 b9       	out	0x04, r24	; 4
  aa:	81 e5       	ldi	r24, 0x51	; 81
  ac:	8c bd       	out	0x2c, r24	; 44
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <c_prev_rd_data>
  b4:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <num_chars_rcv>
  b8:	08 95       	ret

000000ba <spi_set_ss_n>:
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	11 f4       	brne	.+4      	; 0xc2 <spi_set_ss_n+0x8>
  be:	2a 9a       	sbi	0x05, 2	; 5
  c0:	08 95       	ret
  c2:	2a 98       	cbi	0x05, 2	; 5
  c4:	08 95       	ret

000000c6 <spi_xmit>:
  c6:	8e bd       	out	0x2e, r24	; 46
  c8:	0d b4       	in	r0, 0x2d	; 45
  ca:	07 fe       	sbrs	r0, 7
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <spi_xmit+0x2>
  ce:	8e b5       	in	r24, 0x2e	; 46
  d0:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <rd_data>
  d4:	8e 37       	cpi	r24, 0x7E	; 126
  d6:	21 f0       	breq	.+8      	; 0xe0 <spi_xmit+0x1a>
  d8:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <num_chars_rcv>
  dc:	99 23       	and	r25, r25
  de:	51 f0       	breq	.+20     	; 0xf4 <spi_xmit+0x2e>
  e0:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <num_chars_rcv>
  e4:	e9 2f       	mov	r30, r25
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	e2 54       	subi	r30, 0x42	; 66
  ea:	fd 4f       	sbci	r31, 0xFD	; 253
  ec:	80 83       	st	Z, r24
  ee:	9f 5f       	subi	r25, 0xFF	; 255
  f0:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <num_chars_rcv>
  f4:	08 95       	ret

000000f6 <spi_xmit_api_string>:

// SPI transmit string in API frame format
void spi_xmit_api_string(char sData[])
{
  f6:	5f 92       	push	r5
  f8:	6f 92       	push	r6
  fa:	7f 92       	push	r7
  fc:	8f 92       	push	r8
  fe:	9f 92       	push	r9
 100:	af 92       	push	r10
 102:	bf 92       	push	r11
 104:	cf 92       	push	r12
 106:	df 92       	push	r13
 108:	ef 92       	push	r14
 10a:	ff 92       	push	r15
 10c:	0f 93       	push	r16
 10e:	1f 93       	push	r17
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
 118:	28 97       	sbiw	r28, 0x08	; 8
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	f8 94       	cli
 11e:	de bf       	out	0x3e, r29	; 62
 120:	0f be       	out	0x3f, r0	; 63
 122:	cd bf       	out	0x3d, r28	; 61
 124:	4c 01       	movw	r8, r24
	int l_data = strlen(sData);   // length of data message
 126:	fc 01       	movw	r30, r24
 128:	01 90       	ld	r0, Z+
 12a:	00 20       	and	r0, r0
 12c:	e9 f7       	brne	.-6      	; 0x128 <spi_xmit_api_string+0x32>
 12e:	31 97       	sbiw	r30, 0x01	; 1
 130:	6f 01       	movw	r12, r30
 132:	c8 1a       	sub	r12, r24
 134:	d9 0a       	sbc	r13, r25
 136:	36 01       	movw	r6, r12
	int i      = 0;               // initialize loop increment variable
	int i_checksum = 0;           // initialize checksum
	int l_xmit = l_data + 14;     // length of api message (+14 bytes for type, id, address, etc.)
 138:	86 01       	movw	r16, r12
 13a:	02 5f       	subi	r16, 0xF2	; 242
 13c:	1f 4f       	sbci	r17, 0xFF	; 255
	char l_msb = (char) ((l_xmit & 0xFF00)>>8);     // 2-byte length value
	char l_lsb = (char) (l_xmit & 0xFF);
	
	char frame_type    = 0x10;                      // transmit request AT command
	char frame_id      = 0x01;                      // coordinator sends response
	char dest_addr[8]  = {0x00, 0x00, 0x00, 0x00,
 13e:	88 e0       	ldi	r24, 0x08	; 8
 140:	e0 e0       	ldi	r30, 0x00	; 0
 142:	f1 e0       	ldi	r31, 0x01	; 1
 144:	de 01       	movw	r26, r28
 146:	11 96       	adiw	r26, 0x01	; 1
 148:	01 90       	ld	r0, Z+
 14a:	0d 92       	st	X+, r0
 14c:	8a 95       	dec	r24
 14e:	e1 f7       	brne	.-8      	; 0x148 <spi_xmit_api_string+0x52>
	char net_addr[2]   = {0xFF, 0xFE};              // broadcast network address
	char broad_radius  = 0x00;                      // max broadcast radius
	char options       = 0x00;                      // no options used
	
	// assert slave select
	spi_set_ss_n(0);
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	0e 94 5d 00 	call	0xba	; 0xba <spi_set_ss_n>
	
	
	// transmit AT frames not counted in checksum
	spi_xmit(STARTCMD);
 156:	8e e7       	ldi	r24, 0x7E	; 126
 158:	0e 94 63 00 	call	0xc6	; 0xc6 <spi_xmit>
	spi_xmit(l_msb);
 15c:	81 2f       	mov	r24, r17
 15e:	0e 94 63 00 	call	0xc6	; 0xc6 <spi_xmit>
	spi_xmit(l_lsb);
 162:	80 2f       	mov	r24, r16
 164:	0e 94 63 00 	call	0xc6	; 0xc6 <spi_xmit>
	
	// transmit AT frames counted in checksum
	spi_xmit(frame_type);
 168:	80 e1       	ldi	r24, 0x10	; 16
 16a:	0e 94 63 00 	call	0xc6	; 0xc6 <spi_xmit>
	i_checksum += frame_type;
	
	spi_xmit(frame_id);
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	0e 94 63 00 	call	0xc6	; 0xc6 <spi_xmit>
 174:	ce 01       	movw	r24, r28
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	7c 01       	movw	r14, r24
 17a:	5e 01       	movw	r10, r28
 17c:	99 e0       	ldi	r25, 0x09	; 9
 17e:	a9 0e       	add	r10, r25
 180:	b1 1c       	adc	r11, r1
	i_checksum += frame_id;
 182:	01 e1       	ldi	r16, 0x11	; 17
 184:	10 e0       	ldi	r17, 0x00	; 0
	
	for(i=0; i<8; i++)
	{
		spi_xmit(dest_addr[i]);
 186:	f7 01       	movw	r30, r14
 188:	51 90       	ld	r5, Z+
 18a:	7f 01       	movw	r14, r30
 18c:	85 2d       	mov	r24, r5
 18e:	0e 94 63 00 	call	0xc6	; 0xc6 <spi_xmit>
		i_checksum += dest_addr[i];
 192:	05 0d       	add	r16, r5
 194:	11 1d       	adc	r17, r1
	i_checksum += frame_type;
	
	spi_xmit(frame_id);
	i_checksum += frame_id;
	
	for(i=0; i<8; i++)
 196:	ae 14       	cp	r10, r14
 198:	bf 04       	cpc	r11, r15
 19a:	a9 f7       	brne	.-22     	; 0x186 <spi_xmit_api_string+0x90>
		i_checksum += dest_addr[i];
	}
	
	for(i=0; i<2; i++)
	{
		spi_xmit(net_addr[i]);
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	0e 94 63 00 	call	0xc6	; 0xc6 <spi_xmit>
 1a2:	8e ef       	ldi	r24, 0xFE	; 254
 1a4:	0e 94 63 00 	call	0xc6	; 0xc6 <spi_xmit>
		i_checksum += net_addr[i];
 1a8:	03 50       	subi	r16, 0x03	; 3
 1aa:	1e 4f       	sbci	r17, 0xFE	; 254
	}
	
	spi_xmit(broad_radius);
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	0e 94 63 00 	call	0xc6	; 0xc6 <spi_xmit>
	i_checksum += broad_radius;
	
	spi_xmit(options);
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	0e 94 63 00 	call	0xc6	; 0xc6 <spi_xmit>
	i_checksum += options;
	
	for (i=0; i<l_data; i++)
 1b8:	16 14       	cp	r1, r6
 1ba:	17 04       	cpc	r1, r7
 1bc:	84 f4       	brge	.+32     	; 0x1de <spi_xmit_api_string+0xe8>
 1be:	74 01       	movw	r14, r8
 1c0:	c8 0c       	add	r12, r8
 1c2:	d9 1c       	adc	r13, r9
 1c4:	57 01       	movw	r10, r14
	{
		spi_xmit(sData[i]);
 1c6:	f7 01       	movw	r30, r14
 1c8:	81 91       	ld	r24, Z+
 1ca:	7f 01       	movw	r14, r30
 1cc:	0e 94 63 00 	call	0xc6	; 0xc6 <spi_xmit>
		i_checksum += sData[i];
 1d0:	f5 01       	movw	r30, r10
 1d2:	80 81       	ld	r24, Z
 1d4:	08 0f       	add	r16, r24
 1d6:	11 1d       	adc	r17, r1
	i_checksum += broad_radius;
	
	spi_xmit(options);
	i_checksum += options;
	
	for (i=0; i<l_data; i++)
 1d8:	ce 14       	cp	r12, r14
 1da:	df 04       	cpc	r13, r15
 1dc:	99 f7       	brne	.-26     	; 0x1c4 <spi_xmit_api_string+0xce>
	// mask lower 8 bits and subtract from 0xFF
	char c_checksum = (char) (i_checksum & 0xFF);
	c_checksum = (char) (0xFF - c_checksum);
	
	// transmit calculated checksum
	spi_xmit(c_checksum);
 1de:	80 2f       	mov	r24, r16
 1e0:	80 95       	com	r24
 1e2:	0e 94 63 00 	call	0xc6	; 0xc6 <spi_xmit>
	
	// deassert slave select
	spi_set_ss_n(1);
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	0e 94 5d 00 	call	0xba	; 0xba <spi_set_ss_n>
 1ec:	28 96       	adiw	r28, 0x08	; 8
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	f8 94       	cli
 1f2:	de bf       	out	0x3e, r29	; 62
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	cd bf       	out	0x3d, r28	; 61
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	ff 90       	pop	r15
 202:	ef 90       	pop	r14
 204:	df 90       	pop	r13
 206:	cf 90       	pop	r12
 208:	bf 90       	pop	r11
 20a:	af 90       	pop	r10
 20c:	9f 90       	pop	r9
 20e:	8f 90       	pop	r8
 210:	7f 90       	pop	r7
 212:	6f 90       	pop	r6
 214:	5f 90       	pop	r5
 216:	08 95       	ret

00000218 <initUART>:
uint8_t getByte(void)
{
	// Check to see if something was received
	while (!(UCSR0A & _BV(RXC0)));
	return (uint8_t) UDR0;
}
 218:	51 9a       	sbi	0x0a, 1	; 10
 21a:	50 98       	cbi	0x0a, 0	; 10
 21c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 220:	89 e1       	ldi	r24, 0x19	; 25
 222:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 226:	e1 ec       	ldi	r30, 0xC1	; 193
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	88 60       	ori	r24, 0x08	; 8
 22e:	80 83       	st	Z, r24
 230:	80 81       	ld	r24, Z
 232:	80 61       	ori	r24, 0x10	; 16
 234:	80 83       	st	Z, r24
 236:	86 e0       	ldi	r24, 0x06	; 6
 238:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 23c:	08 95       	ret

0000023e <putByte>:
 * 	Blocks the serial port while TX completes
 */
void putByte(unsigned char data)
{
	// Stay here until data buffer is empty
	while (!(UCSR0A & _BV(UDRE0)));
 23e:	e0 ec       	ldi	r30, 0xC0	; 192
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	90 81       	ld	r25, Z
 244:	95 ff       	sbrs	r25, 5
 246:	fd cf       	rjmp	.-6      	; 0x242 <putByte+0x4>
	UDR0 = (unsigned char) data;
 248:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 24c:	08 95       	ret

0000024e <writeString>:

}

/*! \brief Writes an ASCII string to the TX buffer */
void writeString(char *str)
{
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	ec 01       	movw	r28, r24
	while (*str != '\0')
 254:	88 81       	ld	r24, Y
 256:	88 23       	and	r24, r24
 258:	31 f0       	breq	.+12     	; 0x266 <writeString+0x18>
 25a:	21 96       	adiw	r28, 0x01	; 1
	{
		putByte(*str);
 25c:	0e 94 1f 01 	call	0x23e	; 0x23e <putByte>
}

/*! \brief Writes an ASCII string to the TX buffer */
void writeString(char *str)
{
	while (*str != '\0')
 260:	89 91       	ld	r24, Y+
 262:	81 11       	cpse	r24, r1
 264:	fb cf       	rjmp	.-10     	; 0x25c <writeString+0xe>
	{
		putByte(*str);
		++str;
	}
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <xbee_config_spi>:
// Following  SPI operation guidelines in XBee3 User Guide:
// Force SPI mode by holding DOUT low while resetting, until SPI_ATTN_N asserts
void xbee_config_spi(void)
{
	// set reset to XBee as output and assert low
	DDRD  |=  (1<<XBEE_RST_N);
 26c:	57 9a       	sbi	0x0a, 7	; 10
	PORTD &= ~(1<<XBEE_RST_N);
 26e:	5f 98       	cbi	0x0b, 7	; 11
	
	// set DOUT to XBee as output and assert low
	DDRD  |=  (1<<XBEE_DOUT);
 270:	56 9a       	sbi	0x0a, 6	; 10
	PORTD &= ~(1<<XBEE_DOUT);
 272:	5e 98       	cbi	0x0b, 6	; 11
	
	// wait for ATTN_N to be asserted low
	while ( (PINB & (1<<SPI_ATTN_N)));
 274:	19 99       	sbic	0x03, 1	; 3
 276:	fe cf       	rjmp	.-4      	; 0x274 <xbee_config_spi+0x8>
	
	// set DOUT pin to input
	DDRD  &=  ~(1<<XBEE_DOUT);
 278:	56 98       	cbi	0x0a, 6	; 10
	
	// release reset
	PORTD |= (1<<XBEE_RST_N);
 27a:	5f 9a       	sbi	0x0b, 7	; 11
 27c:	08 95       	ret

0000027e <api_frame_decode>:
}


const char* api_frame_decode(char *frame)
{
 27e:	dc 01       	movw	r26, r24
	int l_msg = 0;
	int checksum = 0;
	
	// byte 1 is the start command
	if (*frame == 0x7E)
 280:	8c 91       	ld	r24, X
 282:	8e 37       	cpi	r24, 0x7E	; 126
 284:	09 f0       	breq	.+2      	; 0x288 <api_frame_decode+0xa>
 286:	72 c0       	rjmp	.+228    	; 0x36c <api_frame_decode+0xee>
	{
		// bytes 1 and 2 are length MSB and LSB
		l_msg = ( (int) *(frame+1) << 8) + (int) *(frame+2);
 288:	11 96       	adiw	r26, 0x01	; 1
 28a:	6c 91       	ld	r22, X
 28c:	11 97       	sbiw	r26, 0x01	; 1
 28e:	70 e0       	ldi	r23, 0x00	; 0
 290:	76 2f       	mov	r23, r22
 292:	66 27       	eor	r22, r22
 294:	12 96       	adiw	r26, 0x02	; 2
 296:	8c 91       	ld	r24, X
 298:	12 97       	sbiw	r26, 0x02	; 2
 29a:	68 0f       	add	r22, r24
 29c:	71 1d       	adc	r23, r1
		
		// calculate checksum
		for (int i = 0; i <= l_msg; i ++)
 29e:	77 23       	and	r23, r23
 2a0:	0c f4       	brge	.+2      	; 0x2a4 <api_frame_decode+0x26>
 2a2:	67 c0       	rjmp	.+206    	; 0x372 <api_frame_decode+0xf4>
 2a4:	fd 01       	movw	r30, r26
 2a6:	33 96       	adiw	r30, 0x03	; 3
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	40 e0       	ldi	r20, 0x00	; 0
 2ae:	50 e0       	ldi	r21, 0x00	; 0
		{
			checksum += *(frame+3+i);
 2b0:	91 91       	ld	r25, Z+
 2b2:	49 0f       	add	r20, r25
 2b4:	51 1d       	adc	r21, r1
	{
		// bytes 1 and 2 are length MSB and LSB
		l_msg = ( (int) *(frame+1) << 8) + (int) *(frame+2);
		
		// calculate checksum
		for (int i = 0; i <= l_msg; i ++)
 2b6:	2f 5f       	subi	r18, 0xFF	; 255
 2b8:	3f 4f       	sbci	r19, 0xFF	; 255
 2ba:	62 17       	cp	r22, r18
 2bc:	73 07       	cpc	r23, r19
 2be:	c4 f7       	brge	.-16     	; 0x2b0 <api_frame_decode+0x32>
		{
			checksum += *(frame+3+i);
		}
		
		if ( (0xFF & (checksum)) == 0xFF )
 2c0:	55 27       	eor	r21, r21
 2c2:	4f 3f       	cpi	r20, 0xFF	; 255
 2c4:	51 05       	cpc	r21, r1
 2c6:	09 f0       	breq	.+2      	; 0x2ca <api_frame_decode+0x4c>
 2c8:	57 c0       	rjmp	.+174    	; 0x378 <api_frame_decode+0xfa>
		{
		    // check frame type
			switch ( *(frame+3) )
 2ca:	13 96       	adiw	r26, 0x03	; 3
 2cc:	8c 91       	ld	r24, X
 2ce:	13 97       	sbiw	r26, 0x03	; 3
 2d0:	8a 38       	cpi	r24, 0x8A	; 138
 2d2:	21 f0       	breq	.+8      	; 0x2dc <api_frame_decode+0x5e>
 2d4:	8b 38       	cpi	r24, 0x8B	; 139
 2d6:	09 f4       	brne	.+2      	; 0x2da <api_frame_decode+0x5c>
 2d8:	42 c0       	rjmp	.+132    	; 0x35e <api_frame_decode+0xe0>
 2da:	51 c0       	rjmp	.+162    	; 0x37e <api_frame_decode+0x100>
			{
				// modem status frame
				case 0x8A:
					switch ( *(frame+4) )
 2dc:	14 96       	adiw	r26, 0x04	; 4
 2de:	8c 91       	ld	r24, X
 2e0:	87 30       	cpi	r24, 0x07	; 7
 2e2:	59 f1       	breq	.+86     	; 0x33a <api_frame_decode+0xbc>
 2e4:	70 f4       	brcc	.+28     	; 0x302 <api_frame_decode+0x84>
 2e6:	82 30       	cpi	r24, 0x02	; 2
 2e8:	f9 f0       	breq	.+62     	; 0x328 <api_frame_decode+0xaa>
 2ea:	30 f4       	brcc	.+12     	; 0x2f8 <api_frame_decode+0x7a>
 2ec:	88 23       	and	r24, r24
 2ee:	09 f4       	brne	.+2      	; 0x2f2 <api_frame_decode+0x74>
 2f0:	49 c0       	rjmp	.+146    	; 0x384 <api_frame_decode+0x106>
 2f2:	81 30       	cpi	r24, 0x01	; 1
 2f4:	99 f0       	breq	.+38     	; 0x31c <api_frame_decode+0x9e>
 2f6:	15 c0       	rjmp	.+42     	; 0x322 <api_frame_decode+0xa4>
 2f8:	83 30       	cpi	r24, 0x03	; 3
 2fa:	c9 f0       	breq	.+50     	; 0x32e <api_frame_decode+0xb0>
 2fc:	86 30       	cpi	r24, 0x06	; 6
 2fe:	d1 f0       	breq	.+52     	; 0x334 <api_frame_decode+0xb6>
 300:	10 c0       	rjmp	.+32     	; 0x322 <api_frame_decode+0xa4>
 302:	82 33       	cpi	r24, 0x32	; 50
 304:	19 f1       	breq	.+70     	; 0x34c <api_frame_decode+0xce>
 306:	28 f4       	brcc	.+10     	; 0x312 <api_frame_decode+0x94>
 308:	8d 30       	cpi	r24, 0x0D	; 13
 30a:	d1 f0       	breq	.+52     	; 0x340 <api_frame_decode+0xc2>
 30c:	81 31       	cpi	r24, 0x11	; 17
 30e:	d9 f0       	breq	.+54     	; 0x346 <api_frame_decode+0xc8>
 310:	08 c0       	rjmp	.+16     	; 0x322 <api_frame_decode+0xa4>
 312:	83 33       	cpi	r24, 0x33	; 51
 314:	f1 f0       	breq	.+60     	; 0x352 <api_frame_decode+0xd4>
 316:	80 38       	cpi	r24, 0x80	; 128
 318:	f9 f0       	breq	.+62     	; 0x358 <api_frame_decode+0xda>
 31a:	03 c0       	rjmp	.+6      	; 0x322 <api_frame_decode+0xa4>
					{
						case 0x00: return "Modem: Hardware reset\r\n";					break;
						case 0x01: return "Modem: Watchdog timer reset\r\n";			break;
 31c:	80 e2       	ldi	r24, 0x20	; 32
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	08 95       	ret
		else { return "ERROR: invalid checksum\r\n"; }
			
	}
	else { return "ERROR: invalid start\r\n"; }
		
	return "ERROR\r\n";
 322:	88 ea       	ldi	r24, 0xA8	; 168
 324:	92 e0       	ldi	r25, 0x02	; 2
 326:	08 95       	ret
				case 0x8A:
					switch ( *(frame+4) )
					{
						case 0x00: return "Modem: Hardware reset\r\n";					break;
						case 0x01: return "Modem: Watchdog timer reset\r\n";			break;
						case 0x02: return "Modem: Joined network\r\n";					break;
 328:	8e e3       	ldi	r24, 0x3E	; 62
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	08 95       	ret
						case 0x03: return "Modem: Disassociated\r\n";					break;
 32e:	86 e5       	ldi	r24, 0x56	; 86
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	08 95       	ret
						case 0x06: return "Modem: Coordinator started\r\n";				break;
 334:	8d e6       	ldi	r24, 0x6D	; 109
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	08 95       	ret
						case 0x07: return "Modem: Network security key updated\r\n";	break;
 33a:	8a e8       	ldi	r24, 0x8A	; 138
 33c:	91 e0       	ldi	r25, 0x01	; 1
 33e:	08 95       	ret
						case 0x0D: return "Modem: Voltage supply limit exceeded\r\n";	break;
 340:	80 eb       	ldi	r24, 0xB0	; 176
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	08 95       	ret
						case 0x11: return "Modem: Configuration changed\r\n";			break;
 346:	87 ed       	ldi	r24, 0xD7	; 215
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	08 95       	ret
						case 0x32: return "Modem: BLE Connect\r\n";						break;
 34c:	86 ef       	ldi	r24, 0xF6	; 246
 34e:	91 e0       	ldi	r25, 0x01	; 1
 350:	08 95       	ret
						case 0x33: return "Modem: BLE Disconnect\r\n";					break;
 352:	8b e0       	ldi	r24, 0x0B	; 11
 354:	92 e0       	ldi	r25, 0x02	; 2
 356:	08 95       	ret
						case 0x80: return "Modem: Stack error\r\n";						break;
 358:	83 e2       	ldi	r24, 0x23	; 35
 35a:	92 e0       	ldi	r25, 0x02	; 2
 35c:	08 95       	ret
					}
					break;
					
				// transmit status frame
				case 0x8B:
					if ( *(frame+8) == 0x00) { return "Transmission successful\r\n"; }
 35e:	18 96       	adiw	r26, 0x08	; 8
 360:	8c 91       	ld	r24, X
 362:	88 23       	and	r24, r24
 364:	91 f0       	breq	.+36     	; 0x38a <api_frame_decode+0x10c>
					else                     { return "ERROR: transmission not successful\r\n"; }
 366:	82 e5       	ldi	r24, 0x52	; 82
 368:	92 e0       	ldi	r25, 0x02	; 2
 36a:	08 95       	ret
			
		}
		else { return "ERROR: invalid checksum\r\n"; }
			
	}
	else { return "ERROR: invalid start\r\n"; }
 36c:	81 e9       	ldi	r24, 0x91	; 145
 36e:	92 e0       	ldi	r25, 0x02	; 2
 370:	08 95       	ret
					else                     { return "ERROR: transmission not successful\r\n"; }
					break;
			}
			
		}
		else { return "ERROR: invalid checksum\r\n"; }
 372:	87 e7       	ldi	r24, 0x77	; 119
 374:	92 e0       	ldi	r25, 0x02	; 2
 376:	08 95       	ret
 378:	87 e7       	ldi	r24, 0x77	; 119
 37a:	92 e0       	ldi	r25, 0x02	; 2
 37c:	08 95       	ret
			
	}
	else { return "ERROR: invalid start\r\n"; }
		
	return "ERROR\r\n";
 37e:	88 ea       	ldi	r24, 0xA8	; 168
 380:	92 e0       	ldi	r25, 0x02	; 2
 382:	08 95       	ret
			{
				// modem status frame
				case 0x8A:
					switch ( *(frame+4) )
					{
						case 0x00: return "Modem: Hardware reset\r\n";					break;
 384:	88 e0       	ldi	r24, 0x08	; 8
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	08 95       	ret
					}
					break;
					
				// transmit status frame
				case 0x8B:
					if ( *(frame+8) == 0x00) { return "Transmission successful\r\n"; }
 38a:	88 e3       	ldi	r24, 0x38	; 56
 38c:	92 e0       	ldi	r25, 0x02	; 2
	}
	else { return "ERROR: invalid start\r\n"; }
		
	return "ERROR\r\n";
	
 38e:	08 95       	ret

00000390 <main>:

int main(void)
{
	
	// initialize UART interface
	initUART();
 390:	0e 94 0c 01 	call	0x218	; 0x218 <initUART>
	
    // initialize SPI as master
	spi_master_init();
 394:	0e 94 53 00 	call	0xa6	; 0xa6 <spi_master_init>
	
	// initialize XBee to SPI mode
	xbee_config_spi();
 398:	0e 94 36 01 	call	0x26c	; 0x26c <xbee_config_spi>
    while (1) 
    {
		//writeString("repeating main loop\r\n");
		
		// transmit to xbee
		writeString(api_frame_decode(spi_miso_buf));
 39c:	8e eb       	ldi	r24, 0xBE	; 190
 39e:	92 e0       	ldi	r25, 0x02	; 2
 3a0:	0e 94 3f 01 	call	0x27e	; 0x27e <api_frame_decode>
 3a4:	0e 94 27 01 	call	0x24e	; 0x24e <writeString>
		spi_xmit_api_string("Hello world!");
 3a8:	80 eb       	ldi	r24, 0xB0	; 176
 3aa:	92 e0       	ldi	r25, 0x02	; 2
 3ac:	0e 94 7b 00 	call	0xf6	; 0xf6 <spi_xmit_api_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b0:	2f e3       	ldi	r18, 0x3F	; 63
 3b2:	8d e0       	ldi	r24, 0x0D	; 13
 3b4:	93 e0       	ldi	r25, 0x03	; 3
 3b6:	21 50       	subi	r18, 0x01	; 1
 3b8:	80 40       	sbci	r24, 0x00	; 0
 3ba:	90 40       	sbci	r25, 0x00	; 0
 3bc:	e1 f7       	brne	.-8      	; 0x3b6 <main+0x26>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <main+0x30>
 3c0:	00 00       	nop
 3c2:	ec cf       	rjmp	.-40     	; 0x39c <main+0xc>

000003c4 <_exit>:
 3c4:	f8 94       	cli

000003c6 <__stop_program>:
 3c6:	ff cf       	rjmp	.-2      	; 0x3c6 <__stop_program>
