
xbee_mcu_interfaces.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  0000023e  000002b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cb6  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000096d  00000000  00000000  000010ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006ae  00000000  00000000  00001a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ac  00000000  00000000  000020cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000504  00000000  00000000  00002278  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004b0  00000000  00000000  0000277c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002c2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e3       	ldi	r30, 0x3E	; 62
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 09 01 	call	0x212	; 0x212 <main>
  8e:	0c 94 1d 01 	jmp	0x23a	; 0x23a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <spi_master_init>:
	{
		spi_xmit(sData[i]);
	}
	
	spi_set_ss_n(1);
}
  96:	8c e2       	ldi	r24, 0x2C	; 44
  98:	84 b9       	out	0x04, r24	; 4
  9a:	81 e5       	ldi	r24, 0x51	; 81
  9c:	8c bd       	out	0x2c, r24	; 44
  9e:	08 95       	ret

000000a0 <spi_set_ss_n>:
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	11 f4       	brne	.+4      	; 0xa8 <spi_set_ss_n+0x8>
  a4:	2a 9a       	sbi	0x05, 2	; 5
  a6:	08 95       	ret
  a8:	2a 98       	cbi	0x05, 2	; 5
  aa:	08 95       	ret

000000ac <spi_xmit>:
  ac:	8e bd       	out	0x2e, r24	; 46
  ae:	0d b4       	in	r0, 0x2d	; 45
  b0:	07 fe       	sbrs	r0, 7
  b2:	fd cf       	rjmp	.-6      	; 0xae <spi_xmit+0x2>
  b4:	8e b5       	in	r24, 0x2e	; 46
  b6:	08 95       	ret

000000b8 <spi_xmit_api_string>:

// SPI transmit string in API frame format
void spi_xmit_api_string(char sData[])
{
  b8:	5f 92       	push	r5
  ba:	6f 92       	push	r6
  bc:	7f 92       	push	r7
  be:	8f 92       	push	r8
  c0:	9f 92       	push	r9
  c2:	af 92       	push	r10
  c4:	bf 92       	push	r11
  c6:	cf 92       	push	r12
  c8:	df 92       	push	r13
  ca:	ef 92       	push	r14
  cc:	ff 92       	push	r15
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
  da:	28 97       	sbiw	r28, 0x08	; 8
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	f8 94       	cli
  e0:	de bf       	out	0x3e, r29	; 62
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	cd bf       	out	0x3d, r28	; 61
  e6:	4c 01       	movw	r8, r24
	int l_data = strlen(sData);
  e8:	fc 01       	movw	r30, r24
  ea:	01 90       	ld	r0, Z+
  ec:	00 20       	and	r0, r0
  ee:	e9 f7       	brne	.-6      	; 0xea <spi_xmit_api_string+0x32>
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	6f 01       	movw	r12, r30
  f4:	c8 1a       	sub	r12, r24
  f6:	d9 0a       	sbc	r13, r25
  f8:	36 01       	movw	r6, r12
	int i      = 0;
	int i_checksum = 0;
	int l_xmit = l_data + 14;
  fa:	86 01       	movw	r16, r12
  fc:	02 5f       	subi	r16, 0xF2	; 242
  fe:	1f 4f       	sbci	r17, 0xFF	; 255
	char l_msb = (char) ((l_xmit & 0xFF00)>>8);
	char l_lsb = (char) (l_xmit & 0xFF);
	
	char frame_type    = 0x10;                      // transmit request AT command
	char frame_id      = 0x01;                      // coordinator sends response
	char dest_addr[8]  = {0x00, 0x00, 0x00, 0x00,
 100:	88 e0       	ldi	r24, 0x08	; 8
 102:	e0 e0       	ldi	r30, 0x00	; 0
 104:	f1 e0       	ldi	r31, 0x01	; 1
 106:	de 01       	movw	r26, r28
 108:	11 96       	adiw	r26, 0x01	; 1
 10a:	01 90       	ld	r0, Z+
 10c:	0d 92       	st	X+, r0
 10e:	8a 95       	dec	r24
 110:	e1 f7       	brne	.-8      	; 0x10a <spi_xmit_api_string+0x52>
	char net_addr[2]   = {0xFF, 0xFE};              // broadcast network address
	char broad_radius  = 0x00;                      // max broadcast radius
	char options       = 0x00;                      // no options used
	
	// assert slave select
	spi_set_ss_n(0);
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 50 00 	call	0xa0	; 0xa0 <spi_set_ss_n>
	
	// transmit AT frames not counted in checksum
	spi_xmit(start);
 118:	8e e7       	ldi	r24, 0x7E	; 126
 11a:	0e 94 56 00 	call	0xac	; 0xac <spi_xmit>
	spi_xmit(l_msb);
 11e:	81 2f       	mov	r24, r17
 120:	0e 94 56 00 	call	0xac	; 0xac <spi_xmit>
	spi_xmit(l_lsb);
 124:	80 2f       	mov	r24, r16
 126:	0e 94 56 00 	call	0xac	; 0xac <spi_xmit>
	
	// transmit AT frames counted in checksum
	spi_xmit(frame_type);
 12a:	80 e1       	ldi	r24, 0x10	; 16
 12c:	0e 94 56 00 	call	0xac	; 0xac <spi_xmit>
	i_checksum += frame_type;
	
	spi_xmit(frame_id);
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	0e 94 56 00 	call	0xac	; 0xac <spi_xmit>
 136:	ce 01       	movw	r24, r28
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	7c 01       	movw	r14, r24
 13c:	5e 01       	movw	r10, r28
 13e:	99 e0       	ldi	r25, 0x09	; 9
 140:	a9 0e       	add	r10, r25
 142:	b1 1c       	adc	r11, r1
	i_checksum += frame_id;
 144:	01 e1       	ldi	r16, 0x11	; 17
 146:	10 e0       	ldi	r17, 0x00	; 0
	
	for(i=0; i<8; i++)
	{
		spi_xmit(dest_addr[i]);
 148:	f7 01       	movw	r30, r14
 14a:	51 90       	ld	r5, Z+
 14c:	7f 01       	movw	r14, r30
 14e:	85 2d       	mov	r24, r5
 150:	0e 94 56 00 	call	0xac	; 0xac <spi_xmit>
		i_checksum += dest_addr[i];
 154:	05 0d       	add	r16, r5
 156:	11 1d       	adc	r17, r1
	i_checksum += frame_type;
	
	spi_xmit(frame_id);
	i_checksum += frame_id;
	
	for(i=0; i<8; i++)
 158:	ae 14       	cp	r10, r14
 15a:	bf 04       	cpc	r11, r15
 15c:	a9 f7       	brne	.-22     	; 0x148 <spi_xmit_api_string+0x90>
		i_checksum += dest_addr[i];
	}
	
	for(i=0; i<2; i++)
	{
		spi_xmit(net_addr[i]);
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	0e 94 56 00 	call	0xac	; 0xac <spi_xmit>
 164:	8e ef       	ldi	r24, 0xFE	; 254
 166:	0e 94 56 00 	call	0xac	; 0xac <spi_xmit>
		i_checksum += net_addr[i];
 16a:	03 50       	subi	r16, 0x03	; 3
 16c:	1e 4f       	sbci	r17, 0xFE	; 254
	}
	
	spi_xmit(broad_radius);
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0e 94 56 00 	call	0xac	; 0xac <spi_xmit>
	i_checksum += broad_radius;
	
	spi_xmit(options);
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 56 00 	call	0xac	; 0xac <spi_xmit>
	i_checksum += options;
	
	for (i=0; i<l_data; i++)
 17a:	16 14       	cp	r1, r6
 17c:	17 04       	cpc	r1, r7
 17e:	84 f4       	brge	.+32     	; 0x1a0 <spi_xmit_api_string+0xe8>
 180:	74 01       	movw	r14, r8
 182:	c8 0c       	add	r12, r8
 184:	d9 1c       	adc	r13, r9
 186:	57 01       	movw	r10, r14
	{
		spi_xmit(sData[i]);
 188:	f7 01       	movw	r30, r14
 18a:	81 91       	ld	r24, Z+
 18c:	7f 01       	movw	r14, r30
 18e:	0e 94 56 00 	call	0xac	; 0xac <spi_xmit>
		i_checksum += sData[i];
 192:	f5 01       	movw	r30, r10
 194:	80 81       	ld	r24, Z
 196:	08 0f       	add	r16, r24
 198:	11 1d       	adc	r17, r1
	i_checksum += broad_radius;
	
	spi_xmit(options);
	i_checksum += options;
	
	for (i=0; i<l_data; i++)
 19a:	ce 14       	cp	r12, r14
 19c:	df 04       	cpc	r13, r15
 19e:	99 f7       	brne	.-26     	; 0x186 <spi_xmit_api_string+0xce>
	}
		
	char c_checksum = (char) (i_checksum & 0xFF);
	c_checksum = (char) (0xFF - c_checksum);
	
	spi_xmit(c_checksum);
 1a0:	80 2f       	mov	r24, r16
 1a2:	80 95       	com	r24
 1a4:	0e 94 56 00 	call	0xac	; 0xac <spi_xmit>
	
	spi_set_ss_n(1);
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	0e 94 50 00 	call	0xa0	; 0xa0 <spi_set_ss_n>
	
	
	
 1ae:	28 96       	adiw	r28, 0x08	; 8
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	f8 94       	cli
 1b4:	de bf       	out	0x3e, r29	; 62
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	cd bf       	out	0x3d, r28	; 61
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	1f 91       	pop	r17
 1c0:	0f 91       	pop	r16
 1c2:	ff 90       	pop	r15
 1c4:	ef 90       	pop	r14
 1c6:	df 90       	pop	r13
 1c8:	cf 90       	pop	r12
 1ca:	bf 90       	pop	r11
 1cc:	af 90       	pop	r10
 1ce:	9f 90       	pop	r9
 1d0:	8f 90       	pop	r8
 1d2:	7f 90       	pop	r7
 1d4:	6f 90       	pop	r6
 1d6:	5f 90       	pop	r5
 1d8:	08 95       	ret

000001da <initUART>:

/*! \brief Configures baud rate (refer datasheet) */
void initUART(void)
{
	// Not necessary; initialize anyway
	DDRD |= _BV(PD1);
 1da:	51 9a       	sbi	0x0a, 1	; 10
	DDRD &= ~_BV(PD0);
 1dc:	50 98       	cbi	0x0a, 0	; 10

	// Set baud rate; lower byte and top nibble
	UBRR0H = ((_UBRR) & 0xF00);
 1de:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t) ((_UBRR) & 0xFF);
 1e2:	89 e1       	ldi	r24, 0x19	; 25
 1e4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	TX_START();
 1e8:	e1 ec       	ldi	r30, 0xC1	; 193
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	88 60       	ori	r24, 0x08	; 8
 1f0:	80 83       	st	Z, r24
	RX_START();
 1f2:	80 81       	ld	r24, Z
 1f4:	80 61       	ori	r24, 0x10	; 16
 1f6:	80 83       	st	Z, r24

	// Set frame format = 8-N-1
	UCSR0C = (_DATA << UCSZ00);
 1f8:	86 e0       	ldi	r24, 0x06	; 6
 1fa:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 1fe:	08 95       	ret

00000200 <xbee_config_spi>:
// Following  SPI operation guidelines in XBee3 User Guide:
// Force SPI mode by holding DOUT low while resetting, until SPI_ATTN_N asserts
void xbee_config_spi(void)
{
	// set reset to XBee as output and assert low
	DDRD  |=  (1<<XBEE_RST_N);
 200:	57 9a       	sbi	0x0a, 7	; 10
	PORTD &= ~(1<<XBEE_RST_N);
 202:	5f 98       	cbi	0x0b, 7	; 11
	
	// set DOUT to XBee as output and assert low
	DDRD  |=  (1<<XBEE_DOUT);
 204:	56 9a       	sbi	0x0a, 6	; 10
	PORTD &= ~(1<<XBEE_DOUT);
 206:	5e 98       	cbi	0x0b, 6	; 11
	
	// wait for ATTN_N to be asserted low
	while ( (PINB & (1<<SPI_ATTN_N)));
 208:	19 99       	sbic	0x03, 1	; 3
 20a:	fe cf       	rjmp	.-4      	; 0x208 <xbee_config_spi+0x8>
	
	// set DOUT pin to input
	DDRD  &=  ~(1<<XBEE_DOUT);
 20c:	56 98       	cbi	0x0a, 6	; 10
	
	// release reset
	PORTD |= (1<<XBEE_RST_N);
 20e:	5f 9a       	sbi	0x0b, 7	; 11
 210:	08 95       	ret

00000212 <main>:
#include "mcu_io.h"

int main(void)
{
	// initialize UART interface
	initUART();
 212:	0e 94 ed 00 	call	0x1da	; 0x1da <initUART>
	
    // initialize SPI as master
	spi_master_init();
 216:	0e 94 4b 00 	call	0x96	; 0x96 <spi_master_init>
	
	// initialize XBee to SPI mode
	xbee_config_spi();
 21a:	0e 94 00 01 	call	0x200	; 0x200 <xbee_config_spi>
    while (1) 
    {
		//writeString("repeating main loop\r\n");
		
		// transmit to xbee
		spi_xmit_api_string("Hello world!");
 21e:	88 e0       	ldi	r24, 0x08	; 8
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	0e 94 5c 00 	call	0xb8	; 0xb8 <spi_xmit_api_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 226:	2f e3       	ldi	r18, 0x3F	; 63
 228:	8d e0       	ldi	r24, 0x0D	; 13
 22a:	93 e0       	ldi	r25, 0x03	; 3
 22c:	21 50       	subi	r18, 0x01	; 1
 22e:	80 40       	sbci	r24, 0x00	; 0
 230:	90 40       	sbci	r25, 0x00	; 0
 232:	e1 f7       	brne	.-8      	; 0x22c <main+0x1a>
 234:	00 c0       	rjmp	.+0      	; 0x236 <main+0x24>
 236:	00 00       	nop
 238:	f2 cf       	rjmp	.-28     	; 0x21e <main+0xc>

0000023a <_exit>:
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>
