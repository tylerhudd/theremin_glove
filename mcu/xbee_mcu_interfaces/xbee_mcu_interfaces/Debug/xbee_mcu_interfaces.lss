
xbee_mcu_interfaces.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  000005be  00000652  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c6  0080013c  0080013c  0000068e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000068e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001222  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf7  00000000  00000000  00001a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b5b  00000000  00000000  00002651  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000308  00000000  00000000  000031ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061e  00000000  00000000  000034b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a27  00000000  00000000  00003ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000044f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 25 02 	jmp	0x44a	; 0x44a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee eb       	ldi	r30, 0xBE	; 190
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 33       	cpi	r26, 0x3C	; 60
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ac e3       	ldi	r26, 0x3C	; 60
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 30       	cpi	r26, 0x02	; 2
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <main>
  9e:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_master_init>:
	i2c_start_cmd();
	i2c_write( (device<<1) );
	i2c_write(addr);
	i2c_write(data);
	i2c_stop_cmd();
}
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  ac:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  b0:	84 e0       	ldi	r24, 0x04	; 4
  b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  b6:	08 95       	ret

000000b8 <i2c_start_cmd>:
  b8:	84 ea       	ldi	r24, 0xA4	; 164
  ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  be:	ec eb       	ldi	r30, 0xBC	; 188
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	88 23       	and	r24, r24
  c6:	ec f7       	brge	.-6      	; 0xc2 <i2c_start_cmd+0xa>
  c8:	08 95       	ret

000000ca <i2c_write>:
  ca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  ce:	84 e8       	ldi	r24, 0x84	; 132
  d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  d4:	ec eb       	ldi	r30, 0xBC	; 188
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	88 23       	and	r24, r24
  dc:	ec f7       	brge	.-6      	; 0xd8 <i2c_write+0xe>
  de:	08 95       	ret

000000e0 <i2c_read_nack>:
  e0:	84 e8       	ldi	r24, 0x84	; 132
  e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  e6:	ec eb       	ldi	r30, 0xBC	; 188
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	88 23       	and	r24, r24
  ee:	ec f7       	brge	.-6      	; 0xea <i2c_read_nack+0xa>
  f0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  f4:	08 95       	ret

000000f6 <i2c_read_byte>:

// read one byte from i2c bus
uint8_t i2c_read_byte(uint8_t device, uint8_t addr)
{
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	c8 2f       	mov	r28, r24
  fc:	d6 2f       	mov	r29, r22
	uint8_t rd_data = 0;
	
	i2c_start_cmd();
  fe:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_start_cmd>
	i2c_write( (device<<1) );
 102:	8c 2f       	mov	r24, r28
 104:	88 0f       	add	r24, r24
 106:	0e 94 65 00 	call	0xca	; 0xca <i2c_write>
	i2c_write(addr);
 10a:	8d 2f       	mov	r24, r29
 10c:	0e 94 65 00 	call	0xca	; 0xca <i2c_write>
	i2c_start_cmd();
 110:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_start_cmd>
	i2c_write( (device<<1) | 1);
 114:	8c 2f       	mov	r24, r28
 116:	88 0f       	add	r24, r24
 118:	81 60       	ori	r24, 0x01	; 1
 11a:	0e 94 65 00 	call	0xca	; 0xca <i2c_write>
	rd_data = i2c_read_nack();
 11e:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_read_nack>
}

// generate stop condition on I2C bus
void i2c_stop_cmd(void)
{
	I2C_STOP();
 122:	94 e9       	ldi	r25, 0x94	; 148
 124:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_write( (device<<1) | 1);
	rd_data = i2c_read_nack();
	i2c_stop_cmd();
	
	return rd_data;
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <spi_master_init>:
	{
		spi_xmit(sData[i]);
	}
	
	SPI_SS_N_RELEASE();
}
 12e:	8c e2       	ldi	r24, 0x2C	; 44
 130:	84 b9       	out	0x04, r24	; 4
 132:	81 e5       	ldi	r24, 0x51	; 81
 134:	8c bd       	out	0x2c, r24	; 44
 136:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <num_chars_rcv>
 13a:	08 95       	ret

0000013c <spi_xmit>:
 13c:	8e bd       	out	0x2e, r24	; 46
 13e:	0d b4       	in	r0, 0x2d	; 45
 140:	07 fe       	sbrs	r0, 7
 142:	fd cf       	rjmp	.-6      	; 0x13e <spi_xmit+0x2>
 144:	8e b5       	in	r24, 0x2e	; 46
 146:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <rd_data>
 14a:	8e 37       	cpi	r24, 0x7E	; 126
 14c:	21 f0       	breq	.+8      	; 0x156 <spi_xmit+0x1a>
 14e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <num_chars_rcv>
 152:	99 23       	and	r25, r25
 154:	51 f0       	breq	.+20     	; 0x16a <spi_xmit+0x2e>
 156:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <num_chars_rcv>
 15a:	e9 2f       	mov	r30, r25
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	e0 54       	subi	r30, 0x40	; 64
 160:	fe 4f       	sbci	r31, 0xFE	; 254
 162:	80 83       	st	Z, r24
 164:	9f 5f       	subi	r25, 0xFF	; 255
 166:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <num_chars_rcv>
 16a:	08 95       	ret

0000016c <spi_xmit_api_string>:

// SPI transmit string in API frame format
void spi_xmit_api_string(char sData[])
{
 16c:	5f 92       	push	r5
 16e:	6f 92       	push	r6
 170:	7f 92       	push	r7
 172:	8f 92       	push	r8
 174:	9f 92       	push	r9
 176:	af 92       	push	r10
 178:	bf 92       	push	r11
 17a:	cf 92       	push	r12
 17c:	df 92       	push	r13
 17e:	ef 92       	push	r14
 180:	ff 92       	push	r15
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	28 97       	sbiw	r28, 0x08	; 8
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	f8 94       	cli
 194:	de bf       	out	0x3e, r29	; 62
 196:	0f be       	out	0x3f, r0	; 63
 198:	cd bf       	out	0x3d, r28	; 61
 19a:	4c 01       	movw	r8, r24
	int l_data = strlen(sData);   // length of data message
 19c:	fc 01       	movw	r30, r24
 19e:	01 90       	ld	r0, Z+
 1a0:	00 20       	and	r0, r0
 1a2:	e9 f7       	brne	.-6      	; 0x19e <spi_xmit_api_string+0x32>
 1a4:	31 97       	sbiw	r30, 0x01	; 1
 1a6:	6f 01       	movw	r12, r30
 1a8:	c8 1a       	sub	r12, r24
 1aa:	d9 0a       	sbc	r13, r25
 1ac:	36 01       	movw	r6, r12
	int i      = 0;               // initialize loop increment variable
	int i_checksum = 0;           // initialize checksum
	int l_xmit = l_data + 14;     // length of api message (+14 bytes for type, id, address, etc.)
 1ae:	86 01       	movw	r16, r12
 1b0:	02 5f       	subi	r16, 0xF2	; 242
 1b2:	1f 4f       	sbci	r17, 0xFF	; 255
	char l_msb = (char) ((l_xmit & 0xFF00)>>8);     // 2-byte length value
	char l_lsb = (char) (l_xmit & 0xFF);
	
	char frame_type    = 0x10;                      // transmit request AT command
	char frame_id      = 0x01;                      // coordinator sends response
	char dest_addr[8]  = {0x00, 0x00, 0x00, 0x00,
 1b4:	88 e0       	ldi	r24, 0x08	; 8
 1b6:	e0 e0       	ldi	r30, 0x00	; 0
 1b8:	f1 e0       	ldi	r31, 0x01	; 1
 1ba:	de 01       	movw	r26, r28
 1bc:	11 96       	adiw	r26, 0x01	; 1
 1be:	01 90       	ld	r0, Z+
 1c0:	0d 92       	st	X+, r0
 1c2:	8a 95       	dec	r24
 1c4:	e1 f7       	brne	.-8      	; 0x1be <spi_xmit_api_string+0x52>
						  0x00, 0X00, 0XFF, 0XFF};  // broadcast destination address
	char net_addr[2]   = {0xFF, 0xFE};              // broadcast network address
	char broad_radius  = 0x00;                      // max broadcast radius
	char options       = 0x00;                      // no options used
	
	SPI_SS_N_ASSERT();
 1c6:	2a 98       	cbi	0x05, 2	; 5
	
	// transmit AT frames not counted in checksum
	spi_xmit(API_START);
 1c8:	8e e7       	ldi	r24, 0x7E	; 126
 1ca:	0e 94 9e 00 	call	0x13c	; 0x13c <spi_xmit>
	spi_xmit(l_msb);
 1ce:	81 2f       	mov	r24, r17
 1d0:	0e 94 9e 00 	call	0x13c	; 0x13c <spi_xmit>
	spi_xmit(l_lsb);
 1d4:	80 2f       	mov	r24, r16
 1d6:	0e 94 9e 00 	call	0x13c	; 0x13c <spi_xmit>
	
	// transmit AT frames counted in checksum
	spi_xmit(frame_type);
 1da:	80 e1       	ldi	r24, 0x10	; 16
 1dc:	0e 94 9e 00 	call	0x13c	; 0x13c <spi_xmit>
	i_checksum += frame_type;
	
	spi_xmit(frame_id);
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	0e 94 9e 00 	call	0x13c	; 0x13c <spi_xmit>
 1e6:	ce 01       	movw	r24, r28
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	7c 01       	movw	r14, r24
 1ec:	5e 01       	movw	r10, r28
 1ee:	99 e0       	ldi	r25, 0x09	; 9
 1f0:	a9 0e       	add	r10, r25
 1f2:	b1 1c       	adc	r11, r1
	i_checksum += frame_id;
 1f4:	01 e1       	ldi	r16, 0x11	; 17
 1f6:	10 e0       	ldi	r17, 0x00	; 0
	
	for(i=0; i<8; i++)
	{
		spi_xmit(dest_addr[i]);
 1f8:	f7 01       	movw	r30, r14
 1fa:	51 90       	ld	r5, Z+
 1fc:	7f 01       	movw	r14, r30
 1fe:	85 2d       	mov	r24, r5
 200:	0e 94 9e 00 	call	0x13c	; 0x13c <spi_xmit>
		i_checksum += dest_addr[i];
 204:	05 0d       	add	r16, r5
 206:	11 1d       	adc	r17, r1
	i_checksum += frame_type;
	
	spi_xmit(frame_id);
	i_checksum += frame_id;
	
	for(i=0; i<8; i++)
 208:	ae 14       	cp	r10, r14
 20a:	bf 04       	cpc	r11, r15
 20c:	a9 f7       	brne	.-22     	; 0x1f8 <spi_xmit_api_string+0x8c>
		i_checksum += dest_addr[i];
	}
	
	for(i=0; i<2; i++)
	{
		spi_xmit(net_addr[i]);
 20e:	8f ef       	ldi	r24, 0xFF	; 255
 210:	0e 94 9e 00 	call	0x13c	; 0x13c <spi_xmit>
		i_checksum += net_addr[i];
 214:	01 50       	subi	r16, 0x01	; 1
 216:	1f 4f       	sbci	r17, 0xFF	; 255
		i_checksum += dest_addr[i];
	}
	
	for(i=0; i<2; i++)
	{
		spi_xmit(net_addr[i]);
 218:	8e ef       	ldi	r24, 0xFE	; 254
 21a:	0e 94 9e 00 	call	0x13c	; 0x13c <spi_xmit>
		i_checksum += net_addr[i];
 21e:	02 50       	subi	r16, 0x02	; 2
 220:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	
	spi_xmit(broad_radius);
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	0e 94 9e 00 	call	0x13c	; 0x13c <spi_xmit>
	i_checksum += broad_radius;
	
	spi_xmit(options);
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	0e 94 9e 00 	call	0x13c	; 0x13c <spi_xmit>
	i_checksum += options;
	
	for (i=0; i<l_data; i++)
 22e:	16 14       	cp	r1, r6
 230:	17 04       	cpc	r1, r7
 232:	84 f4       	brge	.+32     	; 0x254 <spi_xmit_api_string+0xe8>
 234:	74 01       	movw	r14, r8
 236:	c8 0c       	add	r12, r8
 238:	d9 1c       	adc	r13, r9
 23a:	57 01       	movw	r10, r14
	{
		spi_xmit(sData[i]);
 23c:	f7 01       	movw	r30, r14
 23e:	81 91       	ld	r24, Z+
 240:	7f 01       	movw	r14, r30
 242:	0e 94 9e 00 	call	0x13c	; 0x13c <spi_xmit>
		i_checksum += sData[i];
 246:	f5 01       	movw	r30, r10
 248:	80 81       	ld	r24, Z
 24a:	08 0f       	add	r16, r24
 24c:	11 1d       	adc	r17, r1
	i_checksum += broad_radius;
	
	spi_xmit(options);
	i_checksum += options;
	
	for (i=0; i<l_data; i++)
 24e:	ce 14       	cp	r12, r14
 250:	df 04       	cpc	r13, r15
 252:	99 f7       	brne	.-26     	; 0x23a <spi_xmit_api_string+0xce>
	// mask lower 8 bits and subtract from 0xFF
	char c_checksum = (char) (i_checksum & 0xFF);
	c_checksum = (char) (0xFF - c_checksum);
	
	// transmit calculated checksum
	spi_xmit(c_checksum);
 254:	80 2f       	mov	r24, r16
 256:	80 95       	com	r24
 258:	0e 94 9e 00 	call	0x13c	; 0x13c <spi_xmit>
	
	SPI_SS_N_RELEASE();
 25c:	2a 9a       	sbi	0x05, 2	; 5
}
 25e:	28 96       	adiw	r28, 0x08	; 8
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	f8 94       	cli
 264:	de bf       	out	0x3e, r29	; 62
 266:	0f be       	out	0x3f, r0	; 63
 268:	cd bf       	out	0x3d, r28	; 61
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	1f 91       	pop	r17
 270:	0f 91       	pop	r16
 272:	ff 90       	pop	r15
 274:	ef 90       	pop	r14
 276:	df 90       	pop	r13
 278:	cf 90       	pop	r12
 27a:	bf 90       	pop	r11
 27c:	af 90       	pop	r10
 27e:	9f 90       	pop	r9
 280:	8f 90       	pop	r8
 282:	7f 90       	pop	r7
 284:	6f 90       	pop	r6
 286:	5f 90       	pop	r5
 288:	08 95       	ret

0000028a <spi_read>:
char* spi_read(void)
{
	int i = 0;
	static char spi_msg[64] = {};
	
	SPI_SS_N_ASSERT();
 28a:	2a 98       	cbi	0x05, 2	; 5
	
	num_chars_rcv = 0;
 28c:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <num_chars_rcv>
	
	for(i = 0; i<MAX_API_FRAME_SIZE && SPI_ATTN_N_LOW; i++)
 290:	19 99       	sbic	0x03, 1	; 3
 292:	1f c0       	rjmp	.+62     	; 0x2d2 <spi_read+0x48>
 294:	20 e4       	ldi	r18, 0x40	; 64
 296:	30 e0       	ldi	r19, 0x00	; 0
	{
		SPDR = 0xFF;
 298:	4f ef       	ldi	r20, 0xFF	; 255
 29a:	4e bd       	out	0x2e, r20	; 46
		
		while(!(SPSR & (1<<SPIF)));
 29c:	0d b4       	in	r0, 0x2d	; 45
 29e:	07 fe       	sbrs	r0, 7
 2a0:	fd cf       	rjmp	.-6      	; 0x29c <spi_read+0x12>
		
		// Read SPI data buffer
		rd_data = SPDR;
 2a2:	8e b5       	in	r24, 0x2e	; 46
 2a4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <rd_data>
		
		//spi_miso_buf[num_chars_rcv] = rd_data
		if ( rd_data == API_START || num_chars_rcv > 0 )
 2a8:	8e 37       	cpi	r24, 0x7E	; 126
 2aa:	21 f0       	breq	.+8      	; 0x2b4 <spi_read+0x2a>
 2ac:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <num_chars_rcv>
 2b0:	99 23       	and	r25, r25
 2b2:	51 f0       	breq	.+20     	; 0x2c8 <spi_read+0x3e>
		{
			spi_msg[num_chars_rcv] = rd_data;
 2b4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <num_chars_rcv>
 2b8:	e9 2f       	mov	r30, r25
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	e4 5c       	subi	r30, 0xC4	; 196
 2be:	fe 4f       	sbci	r31, 0xFE	; 254
 2c0:	80 83       	st	Z, r24
			num_chars_rcv++;
 2c2:	9f 5f       	subi	r25, 0xFF	; 255
 2c4:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <num_chars_rcv>
 2c8:	21 50       	subi	r18, 0x01	; 1
 2ca:	31 09       	sbc	r19, r1
	
	SPI_SS_N_ASSERT();
	
	num_chars_rcv = 0;
	
	for(i = 0; i<MAX_API_FRAME_SIZE && SPI_ATTN_N_LOW; i++)
 2cc:	11 f0       	breq	.+4      	; 0x2d2 <spi_read+0x48>
 2ce:	19 9b       	sbis	0x03, 1	; 3
 2d0:	e4 cf       	rjmp	.-56     	; 0x29a <spi_read+0x10>
			spi_msg[num_chars_rcv] = rd_data;
			num_chars_rcv++;
		}
	}
	
	SPI_SS_N_RELEASE();
 2d2:	2a 9a       	sbi	0x05, 2	; 5
	
	return spi_msg;
 2d4:	8c e3       	ldi	r24, 0x3C	; 60
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	08 95       	ret

000002da <initUART>:

/*! \brief Configures baud rate (refer datasheet) */
void initUART(void)
{
	// Not necessary; initialize anyway
	DDRD |= _BV(PD1);
 2da:	51 9a       	sbi	0x0a, 1	; 10
	DDRD &= ~_BV(PD0);
 2dc:	50 98       	cbi	0x0a, 0	; 10

	// Set baud rate; lower byte and top nibble
	UBRR0H = ((_UBRR) & 0xF00);
 2de:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t) ((_UBRR) & 0xFF);
 2e2:	8c e0       	ldi	r24, 0x0C	; 12
 2e4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	TX_START();
 2e8:	e1 ec       	ldi	r30, 0xC1	; 193
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	88 60       	ori	r24, 0x08	; 8
 2f0:	80 83       	st	Z, r24
	RX_START();
 2f2:	80 81       	ld	r24, Z
 2f4:	80 61       	ori	r24, 0x10	; 16
 2f6:	80 83       	st	Z, r24

	// Set frame format = 8-N-1
	UCSR0C = (_DATA << UCSZ00);
 2f8:	86 e0       	ldi	r24, 0x06	; 6
 2fa:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 2fe:	08 95       	ret

00000300 <getByte>:
 * 	Returns 0 on empty buffer
 */
uint8_t getByte(void)
{
	// Check to see if something was received
	while (!(UCSR0A & _BV(RXC0)));
 300:	e0 ec       	ldi	r30, 0xC0	; 192
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	88 23       	and	r24, r24
 308:	ec f7       	brge	.-6      	; 0x304 <getByte+0x4>
	return (uint8_t) UDR0;
 30a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 30e:	08 95       	ret

00000310 <putByte>:
 * 	Blocks the serial port while TX completes
 */
void putByte(unsigned char data)
{
	// Stay here until data buffer is empty
	while (!(UCSR0A & _BV(UDRE0)));
 310:	e0 ec       	ldi	r30, 0xC0	; 192
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	90 81       	ld	r25, Z
 316:	95 ff       	sbrs	r25, 5
 318:	fd cf       	rjmp	.-6      	; 0x314 <putByte+0x4>
	UDR0 = (unsigned char) data;
 31a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 31e:	08 95       	ret

00000320 <writeString>:

}

/*! \brief Writes an ASCII string to the TX buffer */
void writeString(char *str)
{
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	ec 01       	movw	r28, r24
	while (*str != '\0')
 326:	88 81       	ld	r24, Y
 328:	88 23       	and	r24, r24
 32a:	31 f0       	breq	.+12     	; 0x338 <writeString+0x18>
 32c:	21 96       	adiw	r28, 0x01	; 1
	{
		putByte(*str);
 32e:	0e 94 88 01 	call	0x310	; 0x310 <putByte>
}

/*! \brief Writes an ASCII string to the TX buffer */
void writeString(char *str)
{
	while (*str != '\0')
 332:	89 91       	ld	r24, Y+
 334:	81 11       	cpse	r24, r1
 336:	fb cf       	rjmp	.-10     	; 0x32e <writeString+0xe>
	{
		putByte(*str);
		++str;
	}
}
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

0000033e <xbee_config_spi>:
// Following  SPI operation guidelines in XBee3 User Guide:
// Force SPI mode by holding DOUT low while resetting, until SPI_ATTN_N asserts
void xbee_config_spi(void)
{
	// set reset to XBee as output and assert low
	XBEE_RESET_OUT_EN();
 33e:	57 9a       	sbi	0x0a, 7	; 10
	XBEE_RESET_ASSERT();
 340:	5f 98       	cbi	0x0b, 7	; 11
	
	// set DOUT to XBee as output and assert low
	XBEE_DOUT_OUT_EN();
 342:	56 9a       	sbi	0x0a, 6	; 10
	XBEE_DOUT_LOW();
 344:	5e 98       	cbi	0x0b, 6	; 11
	
	// wait for ATTN_N to be asserted low
	while ( !SPI_ATTN_N_LOW );  
 346:	19 99       	sbic	0x03, 1	; 3
 348:	fe cf       	rjmp	.-4      	; 0x346 <xbee_config_spi+0x8>
	
	// set DOUT pin to input
	XBEE_DOUT_IN_EN();
 34a:	56 98       	cbi	0x0a, 6	; 10
	
	// release reset
	XBEE_RESET_RELEASE();
 34c:	5f 9a       	sbi	0x0b, 7	; 11
 34e:	08 95       	ret

00000350 <api_frame_decode>:
}


char* api_frame_decode(char *frame)
{
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	ec 01       	movw	r28, r24
	int l_msg = 0;
	int checksum = 0;
	static char msg[MAX_API_FRAME_SIZE] = {};
	
	// byte 1 is the start command
	if (*frame == API_START)
 356:	88 81       	ld	r24, Y
 358:	8e 37       	cpi	r24, 0x7E	; 126
 35a:	09 f0       	breq	.+2      	; 0x35e <api_frame_decode+0xe>
 35c:	62 c0       	rjmp	.+196    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	{
		// bytes 1 and 2 are length MSB and LSB, combine and convert to integer
		l_msg = ( (int) *(frame+API_L_MSB) << 8) + (int) *(frame+API_L_LSB);
 35e:	49 81       	ldd	r20, Y+1	; 0x01
 360:	50 e0       	ldi	r21, 0x00	; 0
 362:	54 2f       	mov	r21, r20
 364:	44 27       	eor	r20, r20
 366:	8a 81       	ldd	r24, Y+2	; 0x02
 368:	48 0f       	add	r20, r24
 36a:	51 1d       	adc	r21, r1
		
		// calculate checksum: add every value in payload (excludes start word and length)
		for (int i = 0; i <= l_msg; i ++)
 36c:	55 23       	and	r21, r21
 36e:	0c f4       	brge	.+2      	; 0x372 <api_frame_decode+0x22>
 370:	5b c0       	rjmp	.+182    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 372:	fe 01       	movw	r30, r28
 374:	33 96       	adiw	r30, 0x03	; 3
 376:	20 e0       	ldi	r18, 0x00	; 0
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	70 e0       	ldi	r23, 0x00	; 0
		{
			checksum += *(frame+API_TYPE+i);
 37e:	91 91       	ld	r25, Z+
 380:	69 0f       	add	r22, r25
 382:	71 1d       	adc	r23, r1
	{
		// bytes 1 and 2 are length MSB and LSB, combine and convert to integer
		l_msg = ( (int) *(frame+API_L_MSB) << 8) + (int) *(frame+API_L_LSB);
		
		// calculate checksum: add every value in payload (excludes start word and length)
		for (int i = 0; i <= l_msg; i ++)
 384:	2f 5f       	subi	r18, 0xFF	; 255
 386:	3f 4f       	sbci	r19, 0xFF	; 255
 388:	42 17       	cp	r20, r18
 38a:	53 07       	cpc	r21, r19
 38c:	c4 f7       	brge	.-16     	; 0x37e <api_frame_decode+0x2e>
		{
			checksum += *(frame+API_TYPE+i);
		}
		
		// message is valid if LSB of checksum is 0xFF
		if ( (0xFF & (checksum)) == 0xFF )
 38e:	77 27       	eor	r23, r23
 390:	6f 3f       	cpi	r22, 0xFF	; 255
 392:	71 05       	cpc	r23, r1
 394:	09 f0       	breq	.+2      	; 0x398 <api_frame_decode+0x48>
 396:	4b c0       	rjmp	.+150    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		{
		    // check frame type
			switch ( *(frame+API_TYPE) )
 398:	8b 81       	ldd	r24, Y+3	; 0x03
 39a:	8a 38       	cpi	r24, 0x8A	; 138
 39c:	b9 f0       	breq	.+46     	; 0x3cc <api_frame_decode+0x7c>
 39e:	18 f4       	brcc	.+6      	; 0x3a6 <api_frame_decode+0x56>
 3a0:	81 38       	cpi	r24, 0x81	; 129
 3a2:	61 f0       	breq	.+24     	; 0x3bc <api_frame_decode+0x6c>
 3a4:	47 c0       	rjmp	.+142    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3a6:	8b 38       	cpi	r24, 0x8B	; 139
 3a8:	b9 f0       	breq	.+46     	; 0x3d8 <api_frame_decode+0x88>
 3aa:	80 39       	cpi	r24, 0x90	; 144
 3ac:	09 f0       	breq	.+2      	; 0x3b0 <api_frame_decode+0x60>
 3ae:	42 c0       	rjmp	.+132    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
					}
					return msg;
					break;
				
				case XBEE_RX_PKT:
					for(int i = 0; i < l_msg; i++)
 3b0:	14 16       	cp	r1, r20
 3b2:	15 06       	cpc	r1, r21
 3b4:	2c f1       	brlt	.+74     	; 0x400 <__LOCK_REGION_LENGTH__>
					{
						msg[i] = *(frame+API_RCV_DATA+i);
					}
					return msg;
 3b6:	8c e7       	ldi	r24, 0x7C	; 124
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	44 c0       	rjmp	.+136    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
						default:					return "TX FAIL";									break;
					}
					break;
				
				case XBEE_RX:
					for(int i = 0; i < l_msg-5; i++)
 3bc:	ca 01       	movw	r24, r20
 3be:	05 97       	sbiw	r24, 0x05	; 5
 3c0:	18 16       	cp	r1, r24
 3c2:	19 06       	cpc	r1, r25
 3c4:	7c f0       	brlt	.+30     	; 0x3e4 <api_frame_decode+0x94>
					{
						msg[i] = *(frame+API_RCV_DATA+i);
					}
					return msg;
 3c6:	8c e7       	ldi	r24, 0x7C	; 124
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	3c c0       	rjmp	.+120    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
				case XBEE_BLE_UNLOCK_API:	return "Type:\tBLE Unlock API Frame\r\n";					break;
				case XBEE_CMD_RESPONSE:		return "Type:\tAT Command Response Frame\r\n";				break;
				#endif
				
				case XBEE_MODEM_STATUS:
					switch ( *(frame+API_STATUS) )
 3cc:	8c 81       	ldd	r24, Y+4	; 0x04
 3ce:	88 23       	and	r24, r24
 3d0:	a1 f1       	breq	.+104    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
		else { return "CKS BAD"; }			// invalid checksum
			
	}
	else { return "STRT BAD"; }				// invalid start command
		
	return "ERROR";							// unexpected case
 3d2:	85 e3       	ldi	r24, 0x35	; 53
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	36 c0       	rjmp	.+108    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
						#endif
					}
					break;
					
				case XBEE_XMIT_STATUS:
					switch( *(frame+API_XMIT_STATUS) )
 3d8:	88 85       	ldd	r24, Y+8	; 0x08
 3da:	88 23       	and	r24, r24
 3dc:	89 f1       	breq	.+98     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
						case STATUS_DATA_EXCEEDED:	return "Xmit:\tData payload too large";				break;
						case STATUS_UNREQUESTED:	return "Xmit:\tIndirect message unrequested";		break;
						#else
						case STATUS_SUCCESS:		return "TX GOOD";									break;
						#endif
						default:					return "TX FAIL";									break;
 3de:	84 e1       	ldi	r24, 0x14	; 20
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	30 c0       	rjmp	.+96     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 3e4:	de 01       	movw	r26, r28
 3e6:	18 96       	adiw	r26, 0x08	; 8
 3e8:	ec e7       	ldi	r30, 0x7C	; 124
 3ea:	f1 e0       	ldi	r31, 0x01	; 1
 3ec:	49 58       	subi	r20, 0x89	; 137
 3ee:	5e 4f       	sbci	r21, 0xFE	; 254
					break;
				
				case XBEE_RX:
					for(int i = 0; i < l_msg-5; i++)
					{
						msg[i] = *(frame+API_RCV_DATA+i);
 3f0:	8d 91       	ld	r24, X+
 3f2:	81 93       	st	Z+, r24
						default:					return "TX FAIL";									break;
					}
					break;
				
				case XBEE_RX:
					for(int i = 0; i < l_msg-5; i++)
 3f4:	4e 17       	cp	r20, r30
 3f6:	5f 07       	cpc	r21, r31
 3f8:	d9 f7       	brne	.-10     	; 0x3f0 <api_frame_decode+0xa0>
					{
						msg[i] = *(frame+API_RCV_DATA+i);
					}
					return msg;
 3fa:	8c e7       	ldi	r24, 0x7C	; 124
 3fc:	91 e0       	ldi	r25, 0x01	; 1
 3fe:	22 c0       	rjmp	.+68     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 400:	fe 01       	movw	r30, r28
 402:	38 96       	adiw	r30, 0x08	; 8
 404:	ac e7       	ldi	r26, 0x7C	; 124
 406:	b1 e0       	ldi	r27, 0x01	; 1
 408:	48 5f       	subi	r20, 0xF8	; 248
 40a:	5f 4f       	sbci	r21, 0xFF	; 255
 40c:	ce 01       	movw	r24, r28
 40e:	84 0f       	add	r24, r20
 410:	95 1f       	adc	r25, r21
					break;
				
				case XBEE_RX_PKT:
					for(int i = 0; i < l_msg; i++)
					{
						msg[i] = *(frame+API_RCV_DATA+i);
 412:	21 91       	ld	r18, Z+
 414:	2d 93       	st	X+, r18
					}
					return msg;
					break;
				
				case XBEE_RX_PKT:
					for(int i = 0; i < l_msg; i++)
 416:	e8 17       	cp	r30, r24
 418:	f9 07       	cpc	r31, r25
 41a:	d9 f7       	brne	.-10     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
					{
						msg[i] = *(frame+API_RCV_DATA+i);
					}
					return msg;
 41c:	8c e7       	ldi	r24, 0x7C	; 124
 41e:	91 e0       	ldi	r25, 0x01	; 1
 420:	11 c0       	rjmp	.+34     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
			
		}
		else { return "CKS BAD"; }			// invalid checksum
			
	}
	else { return "STRT BAD"; }				// invalid start command
 422:	8c e2       	ldi	r24, 0x2C	; 44
 424:	91 e0       	ldi	r25, 0x01	; 1
 426:	0e c0       	rjmp	.+28     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
					
				default: return "FRM BAD";	// unexpected frame type
			}
			
		}
		else { return "CKS BAD"; }			// invalid checksum
 428:	84 e2       	ldi	r24, 0x24	; 36
 42a:	91 e0       	ldi	r25, 0x01	; 1
 42c:	0b c0       	rjmp	.+22     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 42e:	84 e2       	ldi	r24, 0x24	; 36
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	08 c0       	rjmp	.+16     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
				case XBEE_MANY2ONE_ROUTE:	return "Type:\tMany-to-One Route Request Indicator\r\n";	break;
				case XBEE_BLE_UNLOCK_RSP:	return "Type:\tBLE Unlock Response Frame\r\n";				break;
				case XBEE_USER_DATA_RELAY:	return "Type:\tUser Data Relay Output\r\n";					break;
				#endif
					
				default: return "FRM BAD";	// unexpected frame type
 434:	8c e1       	ldi	r24, 0x1C	; 28
 436:	91 e0       	ldi	r25, 0x01	; 1
 438:	05 c0       	rjmp	.+10     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
						case STATUS_CFG_WHILE_JOIN: return "Modem:\tConfiguration changed\r\n";			break;
						case STATUS_BLE_CONNECT:    return "Modem:\tBLE Connect\r\n";					break;
						case STATUS_BLE_DISCONNECT: return "Modem:\tBLE Disconnect\r\n";				break;
						case STATUS_STACK_ERROR:    return "Modem:\tStack error\r\n";					break;
						#else
						case STATUS_HW_RST:         return "RST";										break;
 43a:	88 e0       	ldi	r24, 0x08	; 8
 43c:	91 e0       	ldi	r25, 0x01	; 1
 43e:	02 c0       	rjmp	.+4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
						case STATUS_ATT_UNI_APS:	return "Xmit:\tAttempted Unicast with APS EE=0";	break;
						case STATUS_LACK_OF_RSRC2:	return "Xmit:\tLack of free resources (2)";			break;
						case STATUS_DATA_EXCEEDED:	return "Xmit:\tData payload too large";				break;
						case STATUS_UNREQUESTED:	return "Xmit:\tIndirect message unrequested";		break;
						#else
						case STATUS_SUCCESS:		return "TX GOOD";									break;
 440:	8c e0       	ldi	r24, 0x0C	; 12
 442:	91 e0       	ldi	r25, 0x01	; 1
	}
	else { return "STRT BAD"; }				// invalid start command
		
	return "ERROR";							// unexpected case
	
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <__vector_18>:
char spi_miso_buf[MAX_API_FRAME_SIZE];
int  toggle_led0 = 0;
int  toggle_led1 = 0;

ISR(USART_RX_vect)
{
 44a:	1f 92       	push	r1
 44c:	0f 92       	push	r0
 44e:	0f b6       	in	r0, 0x3f	; 63
 450:	0f 92       	push	r0
 452:	11 24       	eor	r1, r1
 454:	2f 93       	push	r18
 456:	3f 93       	push	r19
 458:	4f 93       	push	r20
 45a:	5f 93       	push	r21
 45c:	6f 93       	push	r22
 45e:	7f 93       	push	r23
 460:	8f 93       	push	r24
 462:	9f 93       	push	r25
 464:	af 93       	push	r26
 466:	bf 93       	push	r27
 468:	ef 93       	push	r30
 46a:	ff 93       	push	r31
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	00 d0       	rcall	.+0      	; 0x472 <__vector_18+0x28>
 472:	cd b7       	in	r28, 0x3d	; 61
 474:	de b7       	in	r29, 0x3e	; 62
	char rxdata = (char)getByte();
 476:	0e 94 80 01 	call	0x300	; 0x300 <getByte>
	char rfTX[2] = {rxdata,'\0'};
 47a:	89 83       	std	Y+1, r24	; 0x01
 47c:	1a 82       	std	Y+2, r1	; 0x02
	
	spi_xmit_api_string(rfTX);
 47e:	ce 01       	movw	r24, r28
 480:	01 96       	adiw	r24, 0x01	; 1
 482:	0e 94 b6 00 	call	0x16c	; 0x16c <spi_xmit_api_string>
	#if _ECHO
		putByte(rxdata);	// echo in terminal
	#endif
}
 486:	0f 90       	pop	r0
 488:	0f 90       	pop	r0
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	ff 91       	pop	r31
 490:	ef 91       	pop	r30
 492:	bf 91       	pop	r27
 494:	af 91       	pop	r26
 496:	9f 91       	pop	r25
 498:	8f 91       	pop	r24
 49a:	7f 91       	pop	r23
 49c:	6f 91       	pop	r22
 49e:	5f 91       	pop	r21
 4a0:	4f 91       	pop	r20
 4a2:	3f 91       	pop	r19
 4a4:	2f 91       	pop	r18
 4a6:	0f 90       	pop	r0
 4a8:	0f be       	out	0x3f, r0	; 63
 4aa:	0f 90       	pop	r0
 4ac:	1f 90       	pop	r1
 4ae:	18 95       	reti

000004b0 <__vector_4>:

ISR(PCINT1_vect) {
 4b0:	1f 92       	push	r1
 4b2:	0f 92       	push	r0
 4b4:	0f b6       	in	r0, 0x3f	; 63
 4b6:	0f 92       	push	r0
 4b8:	11 24       	eor	r1, r1
 4ba:	8f 93       	push	r24
 4bc:	9f 93       	push	r25
	
	if (BTN0_PRESSED)  { toggle_led0 = 1;  }
 4be:	30 99       	sbic	0x06, 0	; 6
 4c0:	06 c0       	rjmp	.+12     	; 0x4ce <__vector_4+0x1e>
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <toggle_led0+0x1>
 4ca:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <toggle_led0>
		
	if (BTN1_PRESSED)  { toggle_led1 = 1;  }
 4ce:	31 99       	sbic	0x06, 1	; 6
 4d0:	06 c0       	rjmp	.+12     	; 0x4de <__vector_4+0x2e>
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <toggle_led1+0x1>
 4da:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <toggle_led1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4de:	8f e4       	ldi	r24, 0x4F	; 79
 4e0:	93 ec       	ldi	r25, 0xC3	; 195
 4e2:	01 97       	sbiw	r24, 0x01	; 1
 4e4:	f1 f7       	brne	.-4      	; 0x4e2 <__vector_4+0x32>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <__vector_4+0x38>
 4e8:	00 00       	nop
		
	_delay_ms(100);  // debounce delay
}
 4ea:	9f 91       	pop	r25
 4ec:	8f 91       	pop	r24
 4ee:	0f 90       	pop	r0
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	0f 90       	pop	r0
 4f4:	1f 90       	pop	r1
 4f6:	18 95       	reti

000004f8 <main>:

int main(void)
{
	// enable all interrupts
	sei();
 4f8:	78 94       	sei
	
	// enable uart interrupt
	RX_INTEN();
 4fa:	e1 ec       	ldi	r30, 0xC1	; 193
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	80 81       	ld	r24, Z
 500:	80 68       	ori	r24, 0x80	; 128
 502:	80 83       	st	Z, r24
	
	// initialize UART interface
	initUART();
 504:	0e 94 6d 01 	call	0x2da	; 0x2da <initUART>
	
    // initialize SPI as master
	spi_master_init();
 508:	0e 94 97 00 	call	0x12e	; 0x12e <spi_master_init>
	
	// configure XBee to SPI mode
	xbee_config_spi();
 50c:	0e 94 9f 01 	call	0x33e	; 0x33e <xbee_config_spi>
	
	// initialize i2c interface
	i2c_master_init();
 510:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_master_init>
	
	LED_OUT_EN();
 514:	8a b1       	in	r24, 0x0a	; 10
 516:	8c 60       	ori	r24, 0x0C	; 12
 518:	8a b9       	out	0x0a, r24	; 10
	BTN_IN_EN();
 51a:	38 98       	cbi	0x07, 0	; 7
	
	// pin change interrupt enable
	PCICR |= (1<<PCIE1);
 51c:	e8 e6       	ldi	r30, 0x68	; 104
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	80 81       	ld	r24, Z
 522:	82 60       	ori	r24, 0x02	; 2
 524:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9);
 526:	ec e6       	ldi	r30, 0x6C	; 108
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	80 81       	ld	r24, Z
 52c:	83 60       	ori	r24, 0x03	; 3
 52e:	80 83       	st	Z, r24
	 		}
 		}
 		
		if (toggle_led0)
		{
			PORTD ^= (1<<LED0);
 530:	04 e0       	ldi	r16, 0x04	; 4
			putByte(i2c_read_byte(LSM6DS3_ADDR, LSM6DS3_ID));
		}
		
		if (toggle_led1)
		{
			PORTD ^= (1<<LED1);
 532:	18 e0       	ldi	r17, 0x08	; 8
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9);
	
    while (1) 
    {

 		if (SPI_ATTN_N_LOW)
 534:	19 99       	sbic	0x03, 1	; 3
 536:	0e c0       	rjmp	.+28     	; 0x554 <main+0x5c>
 		{
	 		char* spi_rxdata = api_frame_decode((spi_read()));
 538:	0e 94 45 01 	call	0x28a	; 0x28a <spi_read>
 53c:	0e 94 a8 01 	call	0x350	; 0x350 <api_frame_decode>
 540:	ec 01       	movw	r28, r24
	 		
	 		if (strcmp(spi_rxdata, "TX GOOD") != 0)
 542:	6c e0       	ldi	r22, 0x0C	; 12
 544:	71 e0       	ldi	r23, 0x01	; 1
 546:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <strcmp>
 54a:	89 2b       	or	r24, r25
 54c:	19 f0       	breq	.+6      	; 0x554 <main+0x5c>
	 		{
		 		writeString(spi_rxdata);
 54e:	ce 01       	movw	r24, r28
 550:	0e 94 90 01 	call	0x320	; 0x320 <writeString>
	 		}
 		}
 		
		if (toggle_led0)
 554:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <toggle_led0>
 558:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <toggle_led0+0x1>
 55c:	89 2b       	or	r24, r25
 55e:	69 f0       	breq	.+26     	; 0x57a <main+0x82>
		{
			PORTD ^= (1<<LED0);
 560:	8b b1       	in	r24, 0x0b	; 11
 562:	80 27       	eor	r24, r16
 564:	8b b9       	out	0x0b, r24	; 11
			toggle_led0 = 0;
 566:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <toggle_led0+0x1>
 56a:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <toggle_led0>
			putByte(i2c_read_byte(LSM6DS3_ADDR, LSM6DS3_ID));
 56e:	6f e0       	ldi	r22, 0x0F	; 15
 570:	8b e6       	ldi	r24, 0x6B	; 107
 572:	0e 94 7b 00 	call	0xf6	; 0xf6 <i2c_read_byte>
 576:	0e 94 88 01 	call	0x310	; 0x310 <putByte>
		}
		
		if (toggle_led1)
 57a:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <toggle_led1>
 57e:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <toggle_led1+0x1>
 582:	89 2b       	or	r24, r25
 584:	51 f0       	breq	.+20     	; 0x59a <main+0xa2>
		{
			PORTD ^= (1<<LED1);
 586:	8b b1       	in	r24, 0x0b	; 11
 588:	81 27       	eor	r24, r17
 58a:	8b b9       	out	0x0b, r24	; 11
			toggle_led1 = 0;
 58c:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <toggle_led1+0x1>
 590:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <toggle_led1>
			putByte(65);
 594:	81 e4       	ldi	r24, 0x41	; 65
 596:	0e 94 88 01 	call	0x310	; 0x310 <putByte>
 59a:	83 ef       	ldi	r24, 0xF3	; 243
 59c:	91 e0       	ldi	r25, 0x01	; 1
 59e:	01 97       	sbiw	r24, 0x01	; 1
 5a0:	f1 f7       	brne	.-4      	; 0x59e <main+0xa6>
 5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <main+0xac>
 5a4:	00 00       	nop
 5a6:	c6 cf       	rjmp	.-116    	; 0x534 <main+0x3c>

000005a8 <strcmp>:
 5a8:	fb 01       	movw	r30, r22
 5aa:	dc 01       	movw	r26, r24
 5ac:	8d 91       	ld	r24, X+
 5ae:	01 90       	ld	r0, Z+
 5b0:	80 19       	sub	r24, r0
 5b2:	01 10       	cpse	r0, r1
 5b4:	d9 f3       	breq	.-10     	; 0x5ac <strcmp+0x4>
 5b6:	99 0b       	sbc	r25, r25
 5b8:	08 95       	ret

000005ba <_exit>:
 5ba:	f8 94       	cli

000005bc <__stop_program>:
 5bc:	ff cf       	rjmp	.-2      	; 0x5bc <__stop_program>
