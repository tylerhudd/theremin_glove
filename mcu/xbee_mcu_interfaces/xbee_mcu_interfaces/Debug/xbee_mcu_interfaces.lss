
xbee_mcu_interfaces.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000624  00800100  00000836  000008ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000836  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c3  00800724  00800724  00000eee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000eee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f29  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a6d  00000000  00000000  00001f61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000994  00000000  00000000  000029ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000244  00000000  00000000  00003364  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056e  00000000  00000000  000035a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007f9  00000000  00000000  00003b16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000430f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__ctors_end>
   4:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
   8:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
   c:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
  10:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
  14:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
  18:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
  1c:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
  20:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
  24:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
  28:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
  2c:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
  30:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
  34:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
  38:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
  3c:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
  40:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
  44:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
  48:	0c 94 b8 03 	jmp	0x770	; 0x770 <__vector_18>
  4c:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
  50:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
  54:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
  58:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
  5c:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
  60:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
  64:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
  68:	ad 03       	fmulsu	r18, r21
  6a:	c5 02       	muls	r28, r21
  6c:	9e 03       	fmulsu	r17, r22
  6e:	9e 03       	fmulsu	r17, r22
  70:	9e 03       	fmulsu	r17, r22
  72:	9e 03       	fmulsu	r17, r22
  74:	9e 03       	fmulsu	r17, r22
  76:	9e 03       	fmulsu	r17, r22
  78:	d8 02       	muls	r29, r24
  7a:	db 02       	muls	r29, r27
  7c:	9e 03       	fmulsu	r17, r22
  7e:	9e 03       	fmulsu	r17, r22
  80:	9e 03       	fmulsu	r17, r22
  82:	9e 03       	fmulsu	r17, r22
  84:	9e 03       	fmulsu	r17, r22
  86:	de 02       	muls	r29, r30
  88:	9e 03       	fmulsu	r17, r22
  8a:	9e 03       	fmulsu	r17, r22
  8c:	9e 03       	fmulsu	r17, r22
  8e:	9e 03       	fmulsu	r17, r22
  90:	9e 03       	fmulsu	r17, r22
  92:	9e 03       	fmulsu	r17, r22
  94:	9e 03       	fmulsu	r17, r22
  96:	9e 03       	fmulsu	r17, r22
  98:	9e 03       	fmulsu	r17, r22
  9a:	e1 02       	muls	r30, r17
  9c:	9e 03       	fmulsu	r17, r22
  9e:	9e 03       	fmulsu	r17, r22
  a0:	e4 02       	muls	r30, r20
  a2:	9e 03       	fmulsu	r17, r22
  a4:	9e 03       	fmulsu	r17, r22
  a6:	9e 03       	fmulsu	r17, r22
  a8:	9e 03       	fmulsu	r17, r22
  aa:	9e 03       	fmulsu	r17, r22
  ac:	9e 03       	fmulsu	r17, r22
  ae:	9e 03       	fmulsu	r17, r22
  b0:	9e 03       	fmulsu	r17, r22
  b2:	e7 02       	muls	r30, r23
  b4:	9e 03       	fmulsu	r17, r22
  b6:	9e 03       	fmulsu	r17, r22
  b8:	9e 03       	fmulsu	r17, r22
  ba:	9e 03       	fmulsu	r17, r22
  bc:	9e 03       	fmulsu	r17, r22
  be:	9e 03       	fmulsu	r17, r22
  c0:	9e 03       	fmulsu	r17, r22
  c2:	9e 03       	fmulsu	r17, r22
  c4:	9e 03       	fmulsu	r17, r22
  c6:	9e 03       	fmulsu	r17, r22
  c8:	9e 03       	fmulsu	r17, r22
  ca:	9e 03       	fmulsu	r17, r22
  cc:	9e 03       	fmulsu	r17, r22
  ce:	9e 03       	fmulsu	r17, r22
  d0:	9e 03       	fmulsu	r17, r22
  d2:	9e 03       	fmulsu	r17, r22
  d4:	9e 03       	fmulsu	r17, r22
  d6:	9e 03       	fmulsu	r17, r22
  d8:	9e 03       	fmulsu	r17, r22
  da:	9e 03       	fmulsu	r17, r22
  dc:	9e 03       	fmulsu	r17, r22
  de:	9e 03       	fmulsu	r17, r22
  e0:	9e 03       	fmulsu	r17, r22
  e2:	9e 03       	fmulsu	r17, r22
  e4:	9e 03       	fmulsu	r17, r22
  e6:	9e 03       	fmulsu	r17, r22
  e8:	9e 03       	fmulsu	r17, r22
  ea:	9e 03       	fmulsu	r17, r22
  ec:	9e 03       	fmulsu	r17, r22
  ee:	9e 03       	fmulsu	r17, r22
  f0:	9e 03       	fmulsu	r17, r22
  f2:	9e 03       	fmulsu	r17, r22
  f4:	9e 03       	fmulsu	r17, r22
  f6:	9e 03       	fmulsu	r17, r22
  f8:	9e 03       	fmulsu	r17, r22
  fa:	9e 03       	fmulsu	r17, r22
  fc:	9e 03       	fmulsu	r17, r22
  fe:	9e 03       	fmulsu	r17, r22
 100:	9e 03       	fmulsu	r17, r22
 102:	9e 03       	fmulsu	r17, r22
 104:	9e 03       	fmulsu	r17, r22
 106:	9e 03       	fmulsu	r17, r22
 108:	9e 03       	fmulsu	r17, r22
 10a:	9e 03       	fmulsu	r17, r22
 10c:	9e 03       	fmulsu	r17, r22
 10e:	9e 03       	fmulsu	r17, r22
 110:	9e 03       	fmulsu	r17, r22
 112:	9e 03       	fmulsu	r17, r22
 114:	9e 03       	fmulsu	r17, r22
 116:	9e 03       	fmulsu	r17, r22
 118:	9e 03       	fmulsu	r17, r22
 11a:	9e 03       	fmulsu	r17, r22
 11c:	9e 03       	fmulsu	r17, r22
 11e:	9e 03       	fmulsu	r17, r22
 120:	9e 03       	fmulsu	r17, r22
 122:	9e 03       	fmulsu	r17, r22
 124:	9e 03       	fmulsu	r17, r22
 126:	9e 03       	fmulsu	r17, r22
 128:	9e 03       	fmulsu	r17, r22
 12a:	9e 03       	fmulsu	r17, r22
 12c:	9e 03       	fmulsu	r17, r22
 12e:	9e 03       	fmulsu	r17, r22
 130:	9e 03       	fmulsu	r17, r22
 132:	9e 03       	fmulsu	r17, r22
 134:	9e 03       	fmulsu	r17, r22
 136:	9e 03       	fmulsu	r17, r22
 138:	9e 03       	fmulsu	r17, r22
 13a:	9e 03       	fmulsu	r17, r22
 13c:	9e 03       	fmulsu	r17, r22
 13e:	9e 03       	fmulsu	r17, r22
 140:	9e 03       	fmulsu	r17, r22
 142:	9e 03       	fmulsu	r17, r22
 144:	9e 03       	fmulsu	r17, r22
 146:	9e 03       	fmulsu	r17, r22
 148:	9e 03       	fmulsu	r17, r22
 14a:	9e 03       	fmulsu	r17, r22
 14c:	9e 03       	fmulsu	r17, r22
 14e:	9e 03       	fmulsu	r17, r22
 150:	9e 03       	fmulsu	r17, r22
 152:	9e 03       	fmulsu	r17, r22
 154:	9e 03       	fmulsu	r17, r22
 156:	9e 03       	fmulsu	r17, r22
 158:	9e 03       	fmulsu	r17, r22
 15a:	cf 02       	muls	r28, r31
 15c:	9e 03       	fmulsu	r17, r22
 15e:	9e 03       	fmulsu	r17, r22
 160:	9e 03       	fmulsu	r17, r22
 162:	9e 03       	fmulsu	r17, r22
 164:	9e 03       	fmulsu	r17, r22
 166:	9e 03       	fmulsu	r17, r22
 168:	ea 02       	muls	r30, r26
 16a:	9e 03       	fmulsu	r17, r22
 16c:	ed 02       	muls	r30, r29
 16e:	2b 03       	fmul	r18, r19
 170:	9e 03       	fmulsu	r17, r22
 172:	9e 03       	fmulsu	r17, r22
 174:	9e 03       	fmulsu	r17, r22
 176:	9e 03       	fmulsu	r17, r22
 178:	c8 02       	muls	r28, r24
 17a:	80 03       	fmuls	r16, r16
 17c:	83 03       	fmuls	r16, r19
 17e:	9e 03       	fmulsu	r17, r22
 180:	9e 03       	fmulsu	r17, r22
 182:	86 03       	fmuls	r16, r22
 184:	9e 03       	fmulsu	r17, r22
 186:	89 03       	fmulsu	r16, r17
 188:	8c 03       	fmulsu	r16, r20
 18a:	9e 03       	fmulsu	r17, r22
 18c:	9e 03       	fmulsu	r17, r22
 18e:	9e 03       	fmulsu	r17, r22
 190:	9e 03       	fmulsu	r17, r22
 192:	9e 03       	fmulsu	r17, r22
 194:	9e 03       	fmulsu	r17, r22
 196:	9e 03       	fmulsu	r17, r22
 198:	9e 03       	fmulsu	r17, r22
 19a:	8f 03       	fmulsu	r16, r23
 19c:	9e 03       	fmulsu	r17, r22
 19e:	95 03       	fmuls	r17, r21
 1a0:	92 03       	fmuls	r17, r18
 1a2:	9e 03       	fmulsu	r17, r22
 1a4:	9e 03       	fmulsu	r17, r22
 1a6:	9e 03       	fmulsu	r17, r22
 1a8:	9e 03       	fmulsu	r17, r22
 1aa:	9e 03       	fmulsu	r17, r22
 1ac:	9e 03       	fmulsu	r17, r22
 1ae:	9e 03       	fmulsu	r17, r22
 1b0:	98 03       	fmulsu	r17, r16
 1b2:	9b 03       	fmulsu	r17, r19
 1b4:	b3 03       	fmuls	r19, r19
 1b6:	36 03       	mulsu	r19, r22
 1b8:	3c 03       	fmul	r19, r20
 1ba:	39 03       	fmul	r19, r17
 1bc:	39 03       	fmul	r19, r17
 1be:	39 03       	fmul	r19, r17
 1c0:	39 03       	fmul	r19, r17
 1c2:	39 03       	fmul	r19, r17
 1c4:	39 03       	fmul	r19, r17
 1c6:	39 03       	fmul	r19, r17
 1c8:	39 03       	fmul	r19, r17
 1ca:	39 03       	fmul	r19, r17
 1cc:	39 03       	fmul	r19, r17
 1ce:	39 03       	fmul	r19, r17
 1d0:	39 03       	fmul	r19, r17
 1d2:	39 03       	fmul	r19, r17
 1d4:	39 03       	fmul	r19, r17
 1d6:	39 03       	fmul	r19, r17
 1d8:	39 03       	fmul	r19, r17
 1da:	39 03       	fmul	r19, r17
 1dc:	39 03       	fmul	r19, r17
 1de:	3f 03       	fmul	r19, r23
 1e0:	39 03       	fmul	r19, r17
 1e2:	39 03       	fmul	r19, r17
 1e4:	39 03       	fmul	r19, r17
 1e6:	39 03       	fmul	r19, r17
 1e8:	39 03       	fmul	r19, r17
 1ea:	39 03       	fmul	r19, r17
 1ec:	39 03       	fmul	r19, r17
 1ee:	39 03       	fmul	r19, r17
 1f0:	39 03       	fmul	r19, r17
 1f2:	39 03       	fmul	r19, r17
 1f4:	39 03       	fmul	r19, r17
 1f6:	42 03       	mulsu	r20, r18
 1f8:	45 03       	mulsu	r20, r21
 1fa:	48 03       	fmul	r20, r16
 1fc:	4b 03       	fmul	r20, r19
 1fe:	4e 03       	fmul	r20, r22
 200:	51 03       	mulsu	r21, r17
 202:	39 03       	fmul	r19, r17
 204:	39 03       	fmul	r19, r17
 206:	39 03       	fmul	r19, r17
 208:	39 03       	fmul	r19, r17
 20a:	54 03       	mulsu	r21, r20
 20c:	57 03       	mulsu	r21, r23
 20e:	5a 03       	fmul	r21, r18
 210:	5d 03       	fmul	r21, r21
 212:	39 03       	fmul	r19, r17
 214:	39 03       	fmul	r19, r17
 216:	39 03       	fmul	r19, r17
 218:	60 03       	mulsu	r22, r16
 21a:	39 03       	fmul	r19, r17
 21c:	39 03       	fmul	r19, r17
 21e:	39 03       	fmul	r19, r17
 220:	39 03       	fmul	r19, r17
 222:	39 03       	fmul	r19, r17
 224:	39 03       	fmul	r19, r17
 226:	39 03       	fmul	r19, r17
 228:	39 03       	fmul	r19, r17
 22a:	39 03       	fmul	r19, r17
 22c:	39 03       	fmul	r19, r17
 22e:	39 03       	fmul	r19, r17
 230:	39 03       	fmul	r19, r17
 232:	39 03       	fmul	r19, r17
 234:	39 03       	fmul	r19, r17
 236:	39 03       	fmul	r19, r17
 238:	39 03       	fmul	r19, r17
 23a:	39 03       	fmul	r19, r17
 23c:	39 03       	fmul	r19, r17
 23e:	39 03       	fmul	r19, r17
 240:	39 03       	fmul	r19, r17
 242:	39 03       	fmul	r19, r17
 244:	39 03       	fmul	r19, r17
 246:	39 03       	fmul	r19, r17
 248:	39 03       	fmul	r19, r17
 24a:	39 03       	fmul	r19, r17
 24c:	39 03       	fmul	r19, r17
 24e:	39 03       	fmul	r19, r17
 250:	39 03       	fmul	r19, r17
 252:	39 03       	fmul	r19, r17
 254:	39 03       	fmul	r19, r17
 256:	39 03       	fmul	r19, r17
 258:	39 03       	fmul	r19, r17
 25a:	39 03       	fmul	r19, r17
 25c:	39 03       	fmul	r19, r17
 25e:	39 03       	fmul	r19, r17
 260:	39 03       	fmul	r19, r17
 262:	39 03       	fmul	r19, r17
 264:	39 03       	fmul	r19, r17
 266:	39 03       	fmul	r19, r17
 268:	39 03       	fmul	r19, r17
 26a:	39 03       	fmul	r19, r17
 26c:	39 03       	fmul	r19, r17
 26e:	39 03       	fmul	r19, r17
 270:	39 03       	fmul	r19, r17
 272:	39 03       	fmul	r19, r17
 274:	39 03       	fmul	r19, r17
 276:	39 03       	fmul	r19, r17
 278:	39 03       	fmul	r19, r17
 27a:	39 03       	fmul	r19, r17
 27c:	39 03       	fmul	r19, r17
 27e:	39 03       	fmul	r19, r17
 280:	39 03       	fmul	r19, r17
 282:	39 03       	fmul	r19, r17
 284:	39 03       	fmul	r19, r17
 286:	39 03       	fmul	r19, r17
 288:	39 03       	fmul	r19, r17
 28a:	39 03       	fmul	r19, r17
 28c:	39 03       	fmul	r19, r17
 28e:	39 03       	fmul	r19, r17
 290:	39 03       	fmul	r19, r17
 292:	39 03       	fmul	r19, r17
 294:	39 03       	fmul	r19, r17
 296:	39 03       	fmul	r19, r17
 298:	39 03       	fmul	r19, r17
 29a:	39 03       	fmul	r19, r17
 29c:	63 03       	mulsu	r22, r19
 29e:	66 03       	mulsu	r22, r22

000002a0 <__ctors_end>:
 2a0:	11 24       	eor	r1, r1
 2a2:	1f be       	out	0x3f, r1	; 63
 2a4:	cf ef       	ldi	r28, 0xFF	; 255
 2a6:	d8 e0       	ldi	r29, 0x08	; 8
 2a8:	de bf       	out	0x3e, r29	; 62
 2aa:	cd bf       	out	0x3d, r28	; 61

000002ac <__do_copy_data>:
 2ac:	17 e0       	ldi	r17, 0x07	; 7
 2ae:	a0 e0       	ldi	r26, 0x00	; 0
 2b0:	b1 e0       	ldi	r27, 0x01	; 1
 2b2:	e6 e3       	ldi	r30, 0x36	; 54
 2b4:	f8 e0       	ldi	r31, 0x08	; 8
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <__do_copy_data+0x10>
 2b8:	05 90       	lpm	r0, Z+
 2ba:	0d 92       	st	X+, r0
 2bc:	a4 32       	cpi	r26, 0x24	; 36
 2be:	b1 07       	cpc	r27, r17
 2c0:	d9 f7       	brne	.-10     	; 0x2b8 <__do_copy_data+0xc>

000002c2 <__do_clear_bss>:
 2c2:	27 e0       	ldi	r18, 0x07	; 7
 2c4:	a4 e2       	ldi	r26, 0x24	; 36
 2c6:	b7 e0       	ldi	r27, 0x07	; 7
 2c8:	01 c0       	rjmp	.+2      	; 0x2cc <.do_clear_bss_start>

000002ca <.do_clear_bss_loop>:
 2ca:	1d 92       	st	X+, r1

000002cc <.do_clear_bss_start>:
 2cc:	a7 3e       	cpi	r26, 0xE7	; 231
 2ce:	b2 07       	cpc	r27, r18
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <.do_clear_bss_loop>
 2d2:	0e 94 f6 03 	call	0x7ec	; 0x7ec <main>
 2d6:	0c 94 19 04 	jmp	0x832	; 0x832 <_exit>

000002da <__bad_interrupt>:
 2da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002de <spi_master_init>:
	{
		spi_xmit(sData[i]);
	}
	
	spi_set_ss_n(1);
}
 2de:	8c e2       	ldi	r24, 0x2C	; 44
 2e0:	84 b9       	out	0x04, r24	; 4
 2e2:	81 e5       	ldi	r24, 0x51	; 81
 2e4:	8c bd       	out	0x2c, r24	; 44
 2e6:	8f ef       	ldi	r24, 0xFF	; 255
 2e8:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <c_prev_rd_data>
 2ec:	10 92 e5 07 	sts	0x07E5, r1	; 0x8007e5 <num_chars_rcv>
 2f0:	08 95       	ret

000002f2 <spi_set_ss_n>:
 2f2:	81 30       	cpi	r24, 0x01	; 1
 2f4:	11 f4       	brne	.+4      	; 0x2fa <spi_set_ss_n+0x8>
 2f6:	2a 9a       	sbi	0x05, 2	; 5
 2f8:	08 95       	ret
 2fa:	2a 98       	cbi	0x05, 2	; 5
 2fc:	08 95       	ret

000002fe <spi_xmit>:
 2fe:	8e bd       	out	0x2e, r24	; 46
 300:	0d b4       	in	r0, 0x2d	; 45
 302:	07 fe       	sbrs	r0, 7
 304:	fd cf       	rjmp	.-6      	; 0x300 <spi_xmit+0x2>
 306:	8e b5       	in	r24, 0x2e	; 46
 308:	80 93 e4 07 	sts	0x07E4, r24	; 0x8007e4 <rd_data>
 30c:	8e 37       	cpi	r24, 0x7E	; 126
 30e:	21 f0       	breq	.+8      	; 0x318 <spi_xmit+0x1a>
 310:	90 91 e5 07 	lds	r25, 0x07E5	; 0x8007e5 <num_chars_rcv>
 314:	99 23       	and	r25, r25
 316:	51 f0       	breq	.+20     	; 0x32c <spi_xmit+0x2e>
 318:	90 91 e5 07 	lds	r25, 0x07E5	; 0x8007e5 <num_chars_rcv>
 31c:	e9 2f       	mov	r30, r25
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	ec 55       	subi	r30, 0x5C	; 92
 322:	f8 4f       	sbci	r31, 0xF8	; 248
 324:	80 83       	st	Z, r24
 326:	9f 5f       	subi	r25, 0xFF	; 255
 328:	90 93 e5 07 	sts	0x07E5, r25	; 0x8007e5 <num_chars_rcv>
 32c:	08 95       	ret

0000032e <spi_xmit_api_string>:

// SPI transmit string in API frame format
void spi_xmit_api_string(char sData[])
{
 32e:	5f 92       	push	r5
 330:	6f 92       	push	r6
 332:	7f 92       	push	r7
 334:	8f 92       	push	r8
 336:	9f 92       	push	r9
 338:	af 92       	push	r10
 33a:	bf 92       	push	r11
 33c:	cf 92       	push	r12
 33e:	df 92       	push	r13
 340:	ef 92       	push	r14
 342:	ff 92       	push	r15
 344:	0f 93       	push	r16
 346:	1f 93       	push	r17
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	cd b7       	in	r28, 0x3d	; 61
 34e:	de b7       	in	r29, 0x3e	; 62
 350:	28 97       	sbiw	r28, 0x08	; 8
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	f8 94       	cli
 356:	de bf       	out	0x3e, r29	; 62
 358:	0f be       	out	0x3f, r0	; 63
 35a:	cd bf       	out	0x3d, r28	; 61
 35c:	4c 01       	movw	r8, r24
	int l_data = strlen(sData);   // length of data message
 35e:	fc 01       	movw	r30, r24
 360:	01 90       	ld	r0, Z+
 362:	00 20       	and	r0, r0
 364:	e9 f7       	brne	.-6      	; 0x360 <spi_xmit_api_string+0x32>
 366:	31 97       	sbiw	r30, 0x01	; 1
 368:	6f 01       	movw	r12, r30
 36a:	c8 1a       	sub	r12, r24
 36c:	d9 0a       	sbc	r13, r25
 36e:	36 01       	movw	r6, r12
	int i      = 0;               // initialize loop increment variable
	int i_checksum = 0;           // initialize checksum
	int l_xmit = l_data + 14;     // length of api message (+14 bytes for type, id, address, etc.)
 370:	86 01       	movw	r16, r12
 372:	02 5f       	subi	r16, 0xF2	; 242
 374:	1f 4f       	sbci	r17, 0xFF	; 255
	char l_msb = (char) ((l_xmit & 0xFF00)>>8);     // 2-byte length value
	char l_lsb = (char) (l_xmit & 0xFF);
	
	char frame_type    = 0x10;                      // transmit request AT command
	char frame_id      = 0x01;                      // coordinator sends response
	char dest_addr[8]  = {0x00, 0x00, 0x00, 0x00,
 376:	88 e0       	ldi	r24, 0x08	; 8
 378:	e0 e0       	ldi	r30, 0x00	; 0
 37a:	f1 e0       	ldi	r31, 0x01	; 1
 37c:	de 01       	movw	r26, r28
 37e:	11 96       	adiw	r26, 0x01	; 1
 380:	01 90       	ld	r0, Z+
 382:	0d 92       	st	X+, r0
 384:	8a 95       	dec	r24
 386:	e1 f7       	brne	.-8      	; 0x380 <spi_xmit_api_string+0x52>
	char net_addr[2]   = {0xFF, 0xFE};              // broadcast network address
	char broad_radius  = 0x00;                      // max broadcast radius
	char options       = 0x00;                      // no options used
	
	// assert slave select
	spi_set_ss_n(0);
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <spi_set_ss_n>
	
	
	// transmit AT frames not counted in checksum
	spi_xmit(API_START);
 38e:	8e e7       	ldi	r24, 0x7E	; 126
 390:	0e 94 7f 01 	call	0x2fe	; 0x2fe <spi_xmit>
	spi_xmit(l_msb);
 394:	81 2f       	mov	r24, r17
 396:	0e 94 7f 01 	call	0x2fe	; 0x2fe <spi_xmit>
	spi_xmit(l_lsb);
 39a:	80 2f       	mov	r24, r16
 39c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <spi_xmit>
	
	// transmit AT frames counted in checksum
	spi_xmit(frame_type);
 3a0:	80 e1       	ldi	r24, 0x10	; 16
 3a2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <spi_xmit>
	i_checksum += frame_type;
	
	spi_xmit(frame_id);
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	0e 94 7f 01 	call	0x2fe	; 0x2fe <spi_xmit>
 3ac:	ce 01       	movw	r24, r28
 3ae:	01 96       	adiw	r24, 0x01	; 1
 3b0:	7c 01       	movw	r14, r24
 3b2:	5e 01       	movw	r10, r28
 3b4:	99 e0       	ldi	r25, 0x09	; 9
 3b6:	a9 0e       	add	r10, r25
 3b8:	b1 1c       	adc	r11, r1
	i_checksum += frame_id;
 3ba:	01 e1       	ldi	r16, 0x11	; 17
 3bc:	10 e0       	ldi	r17, 0x00	; 0
	
	for(i=0; i<8; i++)
	{
		spi_xmit(dest_addr[i]);
 3be:	f7 01       	movw	r30, r14
 3c0:	51 90       	ld	r5, Z+
 3c2:	7f 01       	movw	r14, r30
 3c4:	85 2d       	mov	r24, r5
 3c6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <spi_xmit>
		i_checksum += dest_addr[i];
 3ca:	05 0d       	add	r16, r5
 3cc:	11 1d       	adc	r17, r1
	i_checksum += frame_type;
	
	spi_xmit(frame_id);
	i_checksum += frame_id;
	
	for(i=0; i<8; i++)
 3ce:	ae 14       	cp	r10, r14
 3d0:	bf 04       	cpc	r11, r15
 3d2:	a9 f7       	brne	.-22     	; 0x3be <spi_xmit_api_string+0x90>
		i_checksum += dest_addr[i];
	}
	
	for(i=0; i<2; i++)
	{
		spi_xmit(net_addr[i]);
 3d4:	8f ef       	ldi	r24, 0xFF	; 255
 3d6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <spi_xmit>
 3da:	8e ef       	ldi	r24, 0xFE	; 254
 3dc:	0e 94 7f 01 	call	0x2fe	; 0x2fe <spi_xmit>
		i_checksum += net_addr[i];
 3e0:	03 50       	subi	r16, 0x03	; 3
 3e2:	1e 4f       	sbci	r17, 0xFE	; 254
	}
	
	spi_xmit(broad_radius);
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <spi_xmit>
	i_checksum += broad_radius;
	
	spi_xmit(options);
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	0e 94 7f 01 	call	0x2fe	; 0x2fe <spi_xmit>
	i_checksum += options;
	
	for (i=0; i<l_data; i++)
 3f0:	16 14       	cp	r1, r6
 3f2:	17 04       	cpc	r1, r7
 3f4:	84 f4       	brge	.+32     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3f6:	74 01       	movw	r14, r8
 3f8:	c8 0c       	add	r12, r8
 3fa:	d9 1c       	adc	r13, r9
 3fc:	57 01       	movw	r10, r14
	{
		spi_xmit(sData[i]);
 3fe:	f7 01       	movw	r30, r14
 400:	81 91       	ld	r24, Z+
 402:	7f 01       	movw	r14, r30
 404:	0e 94 7f 01 	call	0x2fe	; 0x2fe <spi_xmit>
		i_checksum += sData[i];
 408:	f5 01       	movw	r30, r10
 40a:	80 81       	ld	r24, Z
 40c:	08 0f       	add	r16, r24
 40e:	11 1d       	adc	r17, r1
	i_checksum += broad_radius;
	
	spi_xmit(options);
	i_checksum += options;
	
	for (i=0; i<l_data; i++)
 410:	ce 14       	cp	r12, r14
 412:	df 04       	cpc	r13, r15
 414:	99 f7       	brne	.-26     	; 0x3fc <spi_xmit_api_string+0xce>
	// mask lower 8 bits and subtract from 0xFF
	char c_checksum = (char) (i_checksum & 0xFF);
	c_checksum = (char) (0xFF - c_checksum);
	
	// transmit calculated checksum
	spi_xmit(c_checksum);
 416:	80 2f       	mov	r24, r16
 418:	80 95       	com	r24
 41a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <spi_xmit>
	
	// deassert slave select
	spi_set_ss_n(1);
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	0e 94 79 01 	call	0x2f2	; 0x2f2 <spi_set_ss_n>
}
 424:	28 96       	adiw	r28, 0x08	; 8
 426:	0f b6       	in	r0, 0x3f	; 63
 428:	f8 94       	cli
 42a:	de bf       	out	0x3e, r29	; 62
 42c:	0f be       	out	0x3f, r0	; 63
 42e:	cd bf       	out	0x3d, r28	; 61
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
 434:	1f 91       	pop	r17
 436:	0f 91       	pop	r16
 438:	ff 90       	pop	r15
 43a:	ef 90       	pop	r14
 43c:	df 90       	pop	r13
 43e:	cf 90       	pop	r12
 440:	bf 90       	pop	r11
 442:	af 90       	pop	r10
 444:	9f 90       	pop	r9
 446:	8f 90       	pop	r8
 448:	7f 90       	pop	r7
 44a:	6f 90       	pop	r6
 44c:	5f 90       	pop	r5
 44e:	08 95       	ret

00000450 <spi_read>:
char* spi_read(void)
{
	int i = 0;
	static char spi_msg[64] = {};
	
	spi_set_ss_n(0);
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	0e 94 79 01 	call	0x2f2	; 0x2f2 <spi_set_ss_n>
	
	num_chars_rcv = 0;
 456:	10 92 e5 07 	sts	0x07E5, r1	; 0x8007e5 <num_chars_rcv>
	
	for(i = 0; i<64 && SPI_ATTN_N_LOW; i++)
 45a:	19 99       	sbic	0x03, 1	; 3
 45c:	1f c0       	rjmp	.+62     	; 0x49c <spi_read+0x4c>
 45e:	20 e4       	ldi	r18, 0x40	; 64
 460:	30 e0       	ldi	r19, 0x00	; 0
	{
		SPDR = 0xFF;
 462:	4f ef       	ldi	r20, 0xFF	; 255
 464:	4e bd       	out	0x2e, r20	; 46
		
		while(!(SPSR & (1<<SPIF)));
 466:	0d b4       	in	r0, 0x2d	; 45
 468:	07 fe       	sbrs	r0, 7
 46a:	fd cf       	rjmp	.-6      	; 0x466 <spi_read+0x16>
		
		// Read SPI data buffer
		rd_data = SPDR;
 46c:	8e b5       	in	r24, 0x2e	; 46
 46e:	80 93 e4 07 	sts	0x07E4, r24	; 0x8007e4 <rd_data>
		
		//spi_miso_buf[num_chars_rcv] = rd_data
		if ( rd_data == API_START || num_chars_rcv > 0 )
 472:	8e 37       	cpi	r24, 0x7E	; 126
 474:	21 f0       	breq	.+8      	; 0x47e <spi_read+0x2e>
 476:	90 91 e5 07 	lds	r25, 0x07E5	; 0x8007e5 <num_chars_rcv>
 47a:	99 23       	and	r25, r25
 47c:	51 f0       	breq	.+20     	; 0x492 <spi_read+0x42>
		{
			spi_msg[num_chars_rcv] = rd_data;
 47e:	90 91 e5 07 	lds	r25, 0x07E5	; 0x8007e5 <num_chars_rcv>
 482:	e9 2f       	mov	r30, r25
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	ec 5d       	subi	r30, 0xDC	; 220
 488:	f8 4f       	sbci	r31, 0xF8	; 248
 48a:	80 83       	st	Z, r24
			num_chars_rcv++;
 48c:	9f 5f       	subi	r25, 0xFF	; 255
 48e:	90 93 e5 07 	sts	0x07E5, r25	; 0x8007e5 <num_chars_rcv>
 492:	21 50       	subi	r18, 0x01	; 1
 494:	31 09       	sbc	r19, r1
	
	spi_set_ss_n(0);
	
	num_chars_rcv = 0;
	
	for(i = 0; i<64 && SPI_ATTN_N_LOW; i++)
 496:	11 f0       	breq	.+4      	; 0x49c <spi_read+0x4c>
 498:	19 9b       	sbis	0x03, 1	; 3
 49a:	e4 cf       	rjmp	.-56     	; 0x464 <spi_read+0x14>
			spi_msg[num_chars_rcv] = rd_data;
			num_chars_rcv++;
		}
	}
	
	spi_set_ss_n(1);
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <spi_set_ss_n>
	
	return spi_msg;
 4a2:	84 e2       	ldi	r24, 0x24	; 36
 4a4:	97 e0       	ldi	r25, 0x07	; 7
 4a6:	08 95       	ret

000004a8 <initUART>:

/*! \brief Configures baud rate (refer datasheet) */
void initUART(void)
{
	// Not necessary; initialize anyway
	DDRD |= _BV(PD1);
 4a8:	51 9a       	sbi	0x0a, 1	; 10
	DDRD &= ~_BV(PD0);
 4aa:	50 98       	cbi	0x0a, 0	; 10

	// Set baud rate; lower byte and top nibble
	UBRR0H = ((_UBRR) & 0xF00);
 4ac:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t) ((_UBRR) & 0xFF);
 4b0:	89 e1       	ldi	r24, 0x19	; 25
 4b2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	TX_START();
 4b6:	e1 ec       	ldi	r30, 0xC1	; 193
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	80 81       	ld	r24, Z
 4bc:	88 60       	ori	r24, 0x08	; 8
 4be:	80 83       	st	Z, r24
	RX_START();
 4c0:	80 81       	ld	r24, Z
 4c2:	80 61       	ori	r24, 0x10	; 16
 4c4:	80 83       	st	Z, r24

	// Set frame format = 8-N-1
	UCSR0C = (_DATA << UCSZ00);
 4c6:	86 e0       	ldi	r24, 0x06	; 6
 4c8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 4cc:	08 95       	ret

000004ce <getByte>:
 * 	Returns 0 on empty buffer
 */
uint8_t getByte(void)
{
	// Check to see if something was received
	while (!(UCSR0A & _BV(RXC0)));
 4ce:	e0 ec       	ldi	r30, 0xC0	; 192
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	80 81       	ld	r24, Z
 4d4:	88 23       	and	r24, r24
 4d6:	ec f7       	brge	.-6      	; 0x4d2 <getByte+0x4>
	return (uint8_t) UDR0;
 4d8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 4dc:	08 95       	ret

000004de <putByte>:
 * 	Blocks the serial port while TX completes
 */
void putByte(unsigned char data)
{
	// Stay here until data buffer is empty
	while (!(UCSR0A & _BV(UDRE0)));
 4de:	e0 ec       	ldi	r30, 0xC0	; 192
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	90 81       	ld	r25, Z
 4e4:	95 ff       	sbrs	r25, 5
 4e6:	fd cf       	rjmp	.-6      	; 0x4e2 <putByte+0x4>
	UDR0 = (unsigned char) data;
 4e8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 4ec:	08 95       	ret

000004ee <writeString>:

}

/*! \brief Writes an ASCII string to the TX buffer */
void writeString(char *str)
{
 4ee:	cf 93       	push	r28
 4f0:	df 93       	push	r29
 4f2:	ec 01       	movw	r28, r24
	while (*str != '\0')
 4f4:	88 81       	ld	r24, Y
 4f6:	88 23       	and	r24, r24
 4f8:	31 f0       	breq	.+12     	; 0x506 <writeString+0x18>
 4fa:	21 96       	adiw	r28, 0x01	; 1
	{
		putByte(*str);
 4fc:	0e 94 6f 02 	call	0x4de	; 0x4de <putByte>
}

/*! \brief Writes an ASCII string to the TX buffer */
void writeString(char *str)
{
	while (*str != '\0')
 500:	89 91       	ld	r24, Y+
 502:	81 11       	cpse	r24, r1
 504:	fb cf       	rjmp	.-10     	; 0x4fc <writeString+0xe>
	{
		putByte(*str);
		++str;
	}
}
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	08 95       	ret

0000050c <xbee_config_spi>:
// Following  SPI operation guidelines in XBee3 User Guide:
// Force SPI mode by holding DOUT low while resetting, until SPI_ATTN_N asserts
void xbee_config_spi(void)
{
	// set reset to XBee as output and assert low
	DDRD  |=  (1<<XBEE_RST_N);
 50c:	57 9a       	sbi	0x0a, 7	; 10
	PORTD &= ~(1<<XBEE_RST_N);
 50e:	5f 98       	cbi	0x0b, 7	; 11
	
	// set DOUT to XBee as output and assert low
	DDRD  |=  (1<<XBEE_DOUT);
 510:	56 9a       	sbi	0x0a, 6	; 10
	PORTD &= ~(1<<XBEE_DOUT);
 512:	5e 98       	cbi	0x0b, 6	; 11
	
	// wait for ATTN_N to be asserted low
	while ( (PINB & (1<<SPI_ATTN_N)) == SPI_ATTN_N );
 514:	83 b1       	in	r24, 0x03	; 3
	
	// set DOUT pin to input
	DDRD  &=  ~(1<<XBEE_DOUT);
 516:	56 98       	cbi	0x0a, 6	; 10
	
	// release reset
	PORTD |= (1<<XBEE_RST_N);
 518:	5f 9a       	sbi	0x0b, 7	; 11
 51a:	08 95       	ret

0000051c <api_frame_decode>:
}


char* api_frame_decode(char *frame)
{
 51c:	0f 93       	push	r16
 51e:	1f 93       	push	r17
 520:	dc 01       	movw	r26, r24
	int l_msg = 0;
	int checksum = 0;
	static char msg[64] = {};
	// byte 1 is the start command
	if (*frame == API_START)
 522:	8c 91       	ld	r24, X
 524:	8e 37       	cpi	r24, 0x7E	; 126
 526:	09 f0       	breq	.+2      	; 0x52a <api_frame_decode+0xe>
 528:	0f c1       	rjmp	.+542    	; 0x748 <api_frame_decode+0x22c>
	{
		// bytes 1 and 2 are length MSB and LSB
		l_msg = ( (int) *(frame+API_L_MSB) << 8) + (int) *(frame+API_L_LSB);
 52a:	11 96       	adiw	r26, 0x01	; 1
 52c:	6c 91       	ld	r22, X
 52e:	11 97       	sbiw	r26, 0x01	; 1
 530:	70 e0       	ldi	r23, 0x00	; 0
 532:	76 2f       	mov	r23, r22
 534:	66 27       	eor	r22, r22
 536:	12 96       	adiw	r26, 0x02	; 2
 538:	8c 91       	ld	r24, X
 53a:	12 97       	sbiw	r26, 0x02	; 2
 53c:	68 0f       	add	r22, r24
 53e:	71 1d       	adc	r23, r1
		
		// calculate checksum
		for (int i = 0; i <= l_msg; i ++)
 540:	77 23       	and	r23, r23
 542:	0c f4       	brge	.+2      	; 0x546 <api_frame_decode+0x2a>
 544:	04 c1       	rjmp	.+520    	; 0x74e <api_frame_decode+0x232>
 546:	fd 01       	movw	r30, r26
 548:	33 96       	adiw	r30, 0x03	; 3
 54a:	20 e0       	ldi	r18, 0x00	; 0
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	40 e0       	ldi	r20, 0x00	; 0
 550:	50 e0       	ldi	r21, 0x00	; 0
		{
			checksum += *(frame+API_TYPE+i);
 552:	91 91       	ld	r25, Z+
 554:	49 0f       	add	r20, r25
 556:	51 1d       	adc	r21, r1
	{
		// bytes 1 and 2 are length MSB and LSB
		l_msg = ( (int) *(frame+API_L_MSB) << 8) + (int) *(frame+API_L_LSB);
		
		// calculate checksum
		for (int i = 0; i <= l_msg; i ++)
 558:	2f 5f       	subi	r18, 0xFF	; 255
 55a:	3f 4f       	sbci	r19, 0xFF	; 255
 55c:	62 17       	cp	r22, r18
 55e:	73 07       	cpc	r23, r19
 560:	c4 f7       	brge	.-16     	; 0x552 <api_frame_decode+0x36>
		{
			checksum += *(frame+API_TYPE+i);
		}
		
		if ( (0xFF & (checksum)) == 0xFF )
 562:	55 27       	eor	r21, r21
 564:	4f 3f       	cpi	r20, 0xFF	; 255
 566:	51 05       	cpc	r21, r1
 568:	09 f0       	breq	.+2      	; 0x56c <api_frame_decode+0x50>
 56a:	f4 c0       	rjmp	.+488    	; 0x754 <api_frame_decode+0x238>
		{
		    // check frame type
			switch ( *(frame+API_TYPE) )
 56c:	13 96       	adiw	r26, 0x03	; 3
 56e:	ec 91       	ld	r30, X
 570:	13 97       	sbiw	r26, 0x03	; 3
 572:	0e 2f       	mov	r16, r30
 574:	10 e0       	ldi	r17, 0x00	; 0
 576:	f8 01       	movw	r30, r16
 578:	38 97       	sbiw	r30, 0x08	; 8
 57a:	e6 3a       	cpi	r30, 0xA6	; 166
 57c:	f1 05       	cpc	r31, r1
 57e:	08 f0       	brcs	.+2      	; 0x582 <api_frame_decode+0x66>
 580:	dd c0       	rjmp	.+442    	; 0x73c <api_frame_decode+0x220>
 582:	ec 5c       	subi	r30, 0xCC	; 204
 584:	ff 4f       	sbci	r31, 0xFF	; 255
 586:	0c 94 13 04 	jmp	0x826	; 0x826 <__tablejump2__>
			{
				case XBEE_CMD:				return "Type:\tAT Command Frame\r\n";						break;
				case XBEE_CMD_VALUE:		return "Type:\tAT Command-Queue Parameter Value Frame\r\n";	break;
 58a:	81 e2       	ldi	r24, 0x21	; 33
 58c:	91 e0       	ldi	r25, 0x01	; 1
 58e:	ed c0       	rjmp	.+474    	; 0x76a <api_frame_decode+0x24e>
					}
					return msg;
					break;
				
				case XBEE_RX_PKT:
					for(int i = 0; i < l_msg; i++)
 590:	16 16       	cp	r1, r22
 592:	17 06       	cpc	r1, r23
 594:	0c f4       	brge	.+2      	; 0x598 <api_frame_decode+0x7c>
 596:	ab c0       	rjmp	.+342    	; 0x6ee <api_frame_decode+0x1d2>
					{
						//*(msg+i) = *(frame+API_RCV_DATA+i);
					}
					return msg;
 598:	84 e6       	ldi	r24, 0x64	; 100
 59a:	97 e0       	ldi	r25, 0x07	; 7
 59c:	e6 c0       	rjmp	.+460    	; 0x76a <api_frame_decode+0x24e>
						case STATUS_UNREQUESTED:	return "Xmit:\tIndirect message unrequested";		break;
					}
					break;
				
				case XBEE_RX:
					for(int i = 0; i < l_msg-5; i++)
 59e:	cb 01       	movw	r24, r22
 5a0:	05 97       	sbiw	r24, 0x05	; 5
 5a2:	18 16       	cp	r1, r24
 5a4:	19 06       	cpc	r1, r25
 5a6:	0c f4       	brge	.+2      	; 0x5aa <api_frame_decode+0x8e>
 5a8:	94 c0       	rjmp	.+296    	; 0x6d2 <api_frame_decode+0x1b6>
					{
						msg[i] = *(frame+API_RCV_DATA+i);
					}
					return msg;
 5aa:	84 e6       	ldi	r24, 0x64	; 100
 5ac:	97 e0       	ldi	r25, 0x07	; 7
 5ae:	dd c0       	rjmp	.+442    	; 0x76a <api_frame_decode+0x24e>
		    // check frame type
			switch ( *(frame+API_TYPE) )
			{
				case XBEE_CMD:				return "Type:\tAT Command Frame\r\n";						break;
				case XBEE_CMD_VALUE:		return "Type:\tAT Command-Queue Parameter Value Frame\r\n";	break;
				case XBEE_XMIT_REQUEST:		return "Type:\tTransmit Request Frame\r\n";					break;
 5b0:	80 e5       	ldi	r24, 0x50	; 80
 5b2:	91 e0       	ldi	r25, 0x01	; 1
 5b4:	da c0       	rjmp	.+436    	; 0x76a <api_frame_decode+0x24e>
				case XBEE_ADDR_CMD:			return "Type:\tExplicit Addressing Command Frame\r\n";		break;
 5b6:	8f e6       	ldi	r24, 0x6F	; 111
 5b8:	91 e0       	ldi	r25, 0x01	; 1
 5ba:	d7 c0       	rjmp	.+430    	; 0x76a <api_frame_decode+0x24e>
				case XBEE_RMT_CMD_REQUEST:	return "Type:\tRemote AT Command Request Frame\r\n";		break;
 5bc:	89 e9       	ldi	r24, 0x99	; 153
 5be:	91 e0       	ldi	r25, 0x01	; 1
 5c0:	d4 c0       	rjmp	.+424    	; 0x76a <api_frame_decode+0x24e>
				case XBEE_CREATE_SRC:		return "Type:\tCreate Source Route\r\n";					break;
 5c2:	81 ec       	ldi	r24, 0xC1	; 193
 5c4:	91 e0       	ldi	r25, 0x01	; 1
 5c6:	d1 c0       	rjmp	.+418    	; 0x76a <api_frame_decode+0x24e>
				case XBEE_REG_JOINING_DEV:	return "Type:\tRegister Joining Device\r\n";				break;
 5c8:	8d ed       	ldi	r24, 0xDD	; 221
 5ca:	91 e0       	ldi	r25, 0x01	; 1
 5cc:	ce c0       	rjmp	.+412    	; 0x76a <api_frame_decode+0x24e>
				case XBEE_BLE_UNLOCK_API:	return "Type:\tBLE Unlock API Frame\r\n";					break;
 5ce:	8d ef       	ldi	r24, 0xFD	; 253
 5d0:	91 e0       	ldi	r25, 0x01	; 1
 5d2:	cb c0       	rjmp	.+406    	; 0x76a <api_frame_decode+0x24e>
				case XBEE_CMD_RESPONSE:		return "Type:\tAT Command Response Frame\r\n";				break;
 5d4:	8a e1       	ldi	r24, 0x1A	; 26
 5d6:	92 e0       	ldi	r25, 0x02	; 2
 5d8:	c8 c0       	rjmp	.+400    	; 0x76a <api_frame_decode+0x24e>
				
				case XBEE_MODEM_STATUS:
					switch ( *(frame+API_STATUS) )
 5da:	14 96       	adiw	r26, 0x04	; 4
 5dc:	8c 91       	ld	r24, X
 5de:	87 30       	cpi	r24, 0x07	; 7
 5e0:	41 f1       	breq	.+80     	; 0x632 <api_frame_decode+0x116>
 5e2:	70 f4       	brcc	.+28     	; 0x600 <api_frame_decode+0xe4>
 5e4:	82 30       	cpi	r24, 0x02	; 2
 5e6:	e1 f0       	breq	.+56     	; 0x620 <api_frame_decode+0x104>
 5e8:	30 f4       	brcc	.+12     	; 0x5f6 <api_frame_decode+0xda>
 5ea:	88 23       	and	r24, r24
 5ec:	09 f4       	brne	.+2      	; 0x5f0 <api_frame_decode+0xd4>
 5ee:	b8 c0       	rjmp	.+368    	; 0x760 <api_frame_decode+0x244>
 5f0:	81 30       	cpi	r24, 0x01	; 1
 5f2:	99 f0       	breq	.+38     	; 0x61a <api_frame_decode+0xfe>
 5f4:	a6 c0       	rjmp	.+332    	; 0x742 <api_frame_decode+0x226>
 5f6:	83 30       	cpi	r24, 0x03	; 3
 5f8:	b1 f0       	breq	.+44     	; 0x626 <api_frame_decode+0x10a>
 5fa:	86 30       	cpi	r24, 0x06	; 6
 5fc:	b9 f0       	breq	.+46     	; 0x62c <api_frame_decode+0x110>
 5fe:	a1 c0       	rjmp	.+322    	; 0x742 <api_frame_decode+0x226>
 600:	82 33       	cpi	r24, 0x32	; 50
 602:	01 f1       	breq	.+64     	; 0x644 <api_frame_decode+0x128>
 604:	28 f4       	brcc	.+10     	; 0x610 <api_frame_decode+0xf4>
 606:	8d 30       	cpi	r24, 0x0D	; 13
 608:	b9 f0       	breq	.+46     	; 0x638 <api_frame_decode+0x11c>
 60a:	81 31       	cpi	r24, 0x11	; 17
 60c:	c1 f0       	breq	.+48     	; 0x63e <api_frame_decode+0x122>
 60e:	99 c0       	rjmp	.+306    	; 0x742 <api_frame_decode+0x226>
 610:	83 33       	cpi	r24, 0x33	; 51
 612:	d9 f0       	breq	.+54     	; 0x64a <api_frame_decode+0x12e>
 614:	80 38       	cpi	r24, 0x80	; 128
 616:	e1 f0       	breq	.+56     	; 0x650 <api_frame_decode+0x134>
 618:	94 c0       	rjmp	.+296    	; 0x742 <api_frame_decode+0x226>
					{
						case STATUS_HW_RST:         return "Modem:\tHardware reset\r\n";				break;
						case STATUS_WDT_RST:        return "Modem:\tWatchdog timer reset\r\n";			break;
 61a:	84 e5       	ldi	r24, 0x54	; 84
 61c:	92 e0       	ldi	r25, 0x02	; 2
 61e:	a5 c0       	rjmp	.+330    	; 0x76a <api_frame_decode+0x24e>
						case STATUS_JOINED_NW:      return "Modem:\tJoined network\r\n";				break;
 620:	82 e7       	ldi	r24, 0x72	; 114
 622:	92 e0       	ldi	r25, 0x02	; 2
 624:	a2 c0       	rjmp	.+324    	; 0x76a <api_frame_decode+0x24e>
						case STATUS_DISASSOCIATED:  return "Modem:\tDisassociated\r\n";					break;
 626:	8a e8       	ldi	r24, 0x8A	; 138
 628:	92 e0       	ldi	r25, 0x02	; 2
 62a:	9f c0       	rjmp	.+318    	; 0x76a <api_frame_decode+0x24e>
						case STATUS_COORD_STARTED:  return "Modem:\tCoordinator started\r\n";			break;
 62c:	81 ea       	ldi	r24, 0xA1	; 161
 62e:	92 e0       	ldi	r25, 0x02	; 2
 630:	9c c0       	rjmp	.+312    	; 0x76a <api_frame_decode+0x24e>
						case STATUS_NETKEY_UPDATED: return "Modem:\tNetwork security key updated\r\n";	break;
 632:	8e eb       	ldi	r24, 0xBE	; 190
 634:	92 e0       	ldi	r25, 0x02	; 2
 636:	99 c0       	rjmp	.+306    	; 0x76a <api_frame_decode+0x24e>
						case STATUS_OVERVOLTAGE:    return "Modem:\tVoltage supply limit exceeded\r\n";	break;
 638:	84 ee       	ldi	r24, 0xE4	; 228
 63a:	92 e0       	ldi	r25, 0x02	; 2
 63c:	96 c0       	rjmp	.+300    	; 0x76a <api_frame_decode+0x24e>
						case STATUS_CFG_WHILE_JOIN: return "Modem:\tConfiguration changed\r\n";			break;
 63e:	8b e0       	ldi	r24, 0x0B	; 11
 640:	93 e0       	ldi	r25, 0x03	; 3
 642:	93 c0       	rjmp	.+294    	; 0x76a <api_frame_decode+0x24e>
						case STATUS_BLE_CONNECT:    return "Modem:\tBLE Connect\r\n";					break;
 644:	8a e2       	ldi	r24, 0x2A	; 42
 646:	93 e0       	ldi	r25, 0x03	; 3
 648:	90 c0       	rjmp	.+288    	; 0x76a <api_frame_decode+0x24e>
						case STATUS_BLE_DISCONNECT: return "Modem:\tBLE Disconnect\r\n";				break;
 64a:	8f e3       	ldi	r24, 0x3F	; 63
 64c:	93 e0       	ldi	r25, 0x03	; 3
 64e:	8d c0       	rjmp	.+282    	; 0x76a <api_frame_decode+0x24e>
						case STATUS_STACK_ERROR:    return "Modem:\tStack error\r\n";					break;
 650:	87 e5       	ldi	r24, 0x57	; 87
 652:	93 e0       	ldi	r25, 0x03	; 3
 654:	8a c0       	rjmp	.+276    	; 0x76a <api_frame_decode+0x24e>
					}
					break;
					
				case XBEE_XMIT_STATUS:
					switch( *(frame+API_XMIT_STATUS) )
 656:	18 96       	adiw	r26, 0x08	; 8
 658:	8c 91       	ld	r24, X
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	86 37       	cpi	r24, 0x76	; 118
 65e:	91 05       	cpc	r25, r1
 660:	40 f4       	brcc	.+16     	; 0x672 <api_frame_decode+0x156>
 662:	fc 01       	movw	r30, r24
 664:	e6 52       	subi	r30, 0x26	; 38
 666:	ff 4f       	sbci	r31, 0xFF	; 255
 668:	0c 94 13 04 	jmp	0x826	; 0x826 <__tablejump2__>
					{
						case STATUS_SUCCESS:		return "Xmit:\tSuccessful\r\n";						break;
						case STATUS_MAC_ACK_FAIL:	return "Xmit:\tMAC ACK Failure\r\n";				break;
 66c:	8f e7       	ldi	r24, 0x7F	; 127
 66e:	93 e0       	ldi	r25, 0x03	; 3
 670:	7c c0       	rjmp	.+248    	; 0x76a <api_frame_decode+0x24e>
		else { return "ERROR: invalid checksum\r\n"; }
			
	}
	else { return "ERROR: invalid start\r\n"; }
		
	return "ERROR\r\n";
 672:	8c e1       	ldi	r24, 0x1C	; 28
 674:	97 e0       	ldi	r25, 0x07	; 7
 676:	79 c0       	rjmp	.+242    	; 0x76a <api_frame_decode+0x24e>
				case XBEE_XMIT_STATUS:
					switch( *(frame+API_XMIT_STATUS) )
					{
						case STATUS_SUCCESS:		return "Xmit:\tSuccessful\r\n";						break;
						case STATUS_MAC_ACK_FAIL:	return "Xmit:\tMAC ACK Failure\r\n";				break;
						case STATUS_CCA_FAIL:		return "Xmit:\tCCA Failure\r\n";					break;
 678:	87 e9       	ldi	r24, 0x97	; 151
 67a:	93 e0       	ldi	r25, 0x03	; 3
 67c:	76 c0       	rjmp	.+236    	; 0x76a <api_frame_decode+0x24e>
						case STATUS_INVALID_DEST:	return "Xmit:\tInvalid destination endpoint\r\n";	break;
 67e:	8b ea       	ldi	r24, 0xAB	; 171
 680:	93 e0       	ldi	r25, 0x03	; 3
 682:	73 c0       	rjmp	.+230    	; 0x76a <api_frame_decode+0x24e>
						case STATUS_NET_ACK_FAIL:	return "Xmit:\tNetwork ACK Failure ";				break;
 684:	80 ed       	ldi	r24, 0xD0	; 208
 686:	93 e0       	ldi	r25, 0x03	; 3
 688:	70 c0       	rjmp	.+224    	; 0x76a <api_frame_decode+0x24e>
						case STATUS_NOT_ON_NET:		return "Xmit:\tNot Joined to Network";				break;
 68a:	8b ee       	ldi	r24, 0xEB	; 235
 68c:	93 e0       	ldi	r25, 0x03	; 3
 68e:	6d c0       	rjmp	.+218    	; 0x76a <api_frame_decode+0x24e>
						case STATUS_SELF_ADDRESSED: return "Xmit:\tSelf-addressed";						break;
 690:	87 e0       	ldi	r24, 0x07	; 7
 692:	94 e0       	ldi	r25, 0x04	; 4
 694:	6a c0       	rjmp	.+212    	; 0x76a <api_frame_decode+0x24e>
						case STATUS_ADDR_NOT_FOUND:	return "Xmit:\tAddress Not Found";					break;
 696:	8c e1       	ldi	r24, 0x1C	; 28
 698:	94 e0       	ldi	r25, 0x04	; 4
 69a:	67 c0       	rjmp	.+206    	; 0x76a <api_frame_decode+0x24e>
						case STATUS_RTE_NOT_FOUND:	return "Xmit:\tRoute Not Found";					break;
 69c:	84 e3       	ldi	r24, 0x34	; 52
 69e:	94 e0       	ldi	r25, 0x04	; 4
 6a0:	64 c0       	rjmp	.+200    	; 0x76a <api_frame_decode+0x24e>
						case STATUS_NBR_FAIL:		return "Xmit:\tFailed to hear neighbor relay";		break;
 6a2:	8a e4       	ldi	r24, 0x4A	; 74
 6a4:	94 e0       	ldi	r25, 0x04	; 4
 6a6:	61 c0       	rjmp	.+194    	; 0x76a <api_frame_decode+0x24e>
						case STATUS_INVALID_BIND:	return "Xmit:\tInvalid binding table index";		break;
 6a8:	8e e6       	ldi	r24, 0x6E	; 110
 6aa:	94 e0       	ldi	r25, 0x04	; 4
 6ac:	5e c0       	rjmp	.+188    	; 0x76a <api_frame_decode+0x24e>
						case STATUS_LACK_OF_RSRC1:  return "Xmit:\tLack of free resources (1)";			break;
 6ae:	80 e9       	ldi	r24, 0x90	; 144
 6b0:	94 e0       	ldi	r25, 0x04	; 4
 6b2:	5b c0       	rjmp	.+182    	; 0x76a <api_frame_decode+0x24e>
						case STATUS_ATT_BROAD_APS:	return "Xmit:\tAttempted broadcast with APS";		break;
 6b4:	81 eb       	ldi	r24, 0xB1	; 177
 6b6:	94 e0       	ldi	r25, 0x04	; 4
 6b8:	58 c0       	rjmp	.+176    	; 0x76a <api_frame_decode+0x24e>
						case STATUS_ATT_UNI_APS:	return "Xmit:\tAttempted Unicast with APS EE=0";	break;
 6ba:	84 ed       	ldi	r24, 0xD4	; 212
 6bc:	94 e0       	ldi	r25, 0x04	; 4
 6be:	55 c0       	rjmp	.+170    	; 0x76a <api_frame_decode+0x24e>
						case STATUS_LACK_OF_RSRC2:	return "Xmit:\tLack of free resources (2)";			break;
 6c0:	8a ef       	ldi	r24, 0xFA	; 250
 6c2:	94 e0       	ldi	r25, 0x04	; 4
 6c4:	52 c0       	rjmp	.+164    	; 0x76a <api_frame_decode+0x24e>
						case STATUS_DATA_EXCEEDED:	return "Xmit:\tData payload too large";				break;
 6c6:	8b e1       	ldi	r24, 0x1B	; 27
 6c8:	95 e0       	ldi	r25, 0x05	; 5
 6ca:	4f c0       	rjmp	.+158    	; 0x76a <api_frame_decode+0x24e>
						case STATUS_UNREQUESTED:	return "Xmit:\tIndirect message unrequested";		break;
 6cc:	88 e3       	ldi	r24, 0x38	; 56
 6ce:	95 e0       	ldi	r25, 0x05	; 5
 6d0:	4c c0       	rjmp	.+152    	; 0x76a <api_frame_decode+0x24e>
 6d2:	fd 01       	movw	r30, r26
 6d4:	38 96       	adiw	r30, 0x08	; 8
 6d6:	a4 e6       	ldi	r26, 0x64	; 100
 6d8:	b7 e0       	ldi	r27, 0x07	; 7
 6da:	61 5a       	subi	r22, 0xA1	; 161
 6dc:	78 4f       	sbci	r23, 0xF8	; 248
					break;
				
				case XBEE_RX:
					for(int i = 0; i < l_msg-5; i++)
					{
						msg[i] = *(frame+API_RCV_DATA+i);
 6de:	81 91       	ld	r24, Z+
 6e0:	8d 93       	st	X+, r24
						case STATUS_UNREQUESTED:	return "Xmit:\tIndirect message unrequested";		break;
					}
					break;
				
				case XBEE_RX:
					for(int i = 0; i < l_msg-5; i++)
 6e2:	a6 17       	cp	r26, r22
 6e4:	b7 07       	cpc	r27, r23
 6e6:	d9 f7       	brne	.-10     	; 0x6de <api_frame_decode+0x1c2>
					{
						msg[i] = *(frame+API_RCV_DATA+i);
					}
					return msg;
 6e8:	84 e6       	ldi	r24, 0x64	; 100
 6ea:	97 e0       	ldi	r25, 0x07	; 7
 6ec:	3e c0       	rjmp	.+124    	; 0x76a <api_frame_decode+0x24e>
					break;
				
				case XBEE_RX_PKT:
					for(int i = 0; i < l_msg; i++)
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	01 96       	adiw	r24, 0x01	; 1
 6f4:	68 17       	cp	r22, r24
 6f6:	79 07       	cpc	r23, r25
 6f8:	e1 f7       	brne	.-8      	; 0x6f2 <api_frame_decode+0x1d6>
					{
						//*(msg+i) = *(frame+API_RCV_DATA+i);
					}
					return msg;
 6fa:	84 e6       	ldi	r24, 0x64	; 100
 6fc:	97 e0       	ldi	r25, 0x07	; 7
 6fe:	35 c0       	rjmp	.+106    	; 0x76a <api_frame_decode+0x24e>
					break;
					
				case XBEE_EXP_RX_INDICATOR: return "Type:\tExplicit RX Indicator Frame\r\n";			break;
 700:	8b e5       	ldi	r24, 0x5B	; 91
 702:	95 e0       	ldi	r25, 0x05	; 5
 704:	32 c0       	rjmp	.+100    	; 0x76a <api_frame_decode+0x24e>
				case XBEE_IO_SAMPLE_RX:		return "Type:\tIO Data SAmple RX Indicator Frame\r\n";		break; 
 706:	8f e7       	ldi	r24, 0x7F	; 127
 708:	95 e0       	ldi	r25, 0x05	; 5
 70a:	2f c0       	rjmp	.+94     	; 0x76a <api_frame_decode+0x24e>
				case XBEE_NODE_ID:			return "Type:\tNode Identification Indicator Frame\r\n";	break;
 70c:	89 ea       	ldi	r24, 0xA9	; 169
 70e:	95 e0       	ldi	r25, 0x05	; 5
 710:	2c c0       	rjmp	.+88     	; 0x76a <api_frame_decode+0x24e>
				case XBEE_RMT_CMD_RESPONSE:	return "Type:\tRemote Command Response Frame\r\n";			break;
 712:	85 ed       	ldi	r24, 0xD5	; 213
 714:	95 e0       	ldi	r25, 0x05	; 5
 716:	29 c0       	rjmp	.+82     	; 0x76a <api_frame_decode+0x24e>
				case XBEE_EX_MODEM_STATUS:	return "Type:\tExtended Modem Status Frame\r\n";			break;
 718:	8b ef       	ldi	r24, 0xFB	; 251
 71a:	95 e0       	ldi	r25, 0x05	; 5
 71c:	26 c0       	rjmp	.+76     	; 0x76a <api_frame_decode+0x24e>
				case XBEE_ROUTE_RECORD:		return "Type:\tRoute Record Indicator\r\n";					break;
 71e:	8f e1       	ldi	r24, 0x1F	; 31
 720:	96 e0       	ldi	r25, 0x06	; 6
 722:	23 c0       	rjmp	.+70     	; 0x76a <api_frame_decode+0x24e>
				case XBEE_REG_DEV_STATUS:	return "Type:\tRegister Device Status\r\n";					break;
 724:	8e e3       	ldi	r24, 0x3E	; 62
 726:	96 e0       	ldi	r25, 0x06	; 6
 728:	20 c0       	rjmp	.+64     	; 0x76a <api_frame_decode+0x24e>
				case XBEE_MANY2ONE_ROUTE:	return "Type:\tMany-to-One Route Request Indicator\r\n";	break;
 72a:	8d e5       	ldi	r24, 0x5D	; 93
 72c:	96 e0       	ldi	r25, 0x06	; 6
 72e:	1d c0       	rjmp	.+58     	; 0x76a <api_frame_decode+0x24e>
				case XBEE_BLE_UNLOCK_RSP:	return "Type:\tBLE Unlock Response Frame\r\n";				break;
 730:	89 e8       	ldi	r24, 0x89	; 137
 732:	96 e0       	ldi	r25, 0x06	; 6
 734:	1a c0       	rjmp	.+52     	; 0x76a <api_frame_decode+0x24e>
				case XBEE_USER_DATA_RELAY:	return "Type:\tUser Data Relay Output\r\n";					break;
 736:	8b ea       	ldi	r24, 0xAB	; 171
 738:	96 e0       	ldi	r25, 0x06	; 6
 73a:	17 c0       	rjmp	.+46     	; 0x76a <api_frame_decode+0x24e>
					
				default: return "WARNING: Unexpected frame type\r\n";
 73c:	8a ec       	ldi	r24, 0xCA	; 202
 73e:	96 e0       	ldi	r25, 0x06	; 6
 740:	14 c0       	rjmp	.+40     	; 0x76a <api_frame_decode+0x24e>
		else { return "ERROR: invalid checksum\r\n"; }
			
	}
	else { return "ERROR: invalid start\r\n"; }
		
	return "ERROR\r\n";
 742:	8c e1       	ldi	r24, 0x1C	; 28
 744:	97 e0       	ldi	r25, 0x07	; 7
 746:	11 c0       	rjmp	.+34     	; 0x76a <api_frame_decode+0x24e>
			
		}
		else { return "ERROR: invalid checksum\r\n"; }
			
	}
	else { return "ERROR: invalid start\r\n"; }
 748:	85 e0       	ldi	r24, 0x05	; 5
 74a:	97 e0       	ldi	r25, 0x07	; 7
 74c:	0e c0       	rjmp	.+28     	; 0x76a <api_frame_decode+0x24e>
					
				default: return "WARNING: Unexpected frame type\r\n";
			}
			
		}
		else { return "ERROR: invalid checksum\r\n"; }
 74e:	8b ee       	ldi	r24, 0xEB	; 235
 750:	96 e0       	ldi	r25, 0x06	; 6
 752:	0b c0       	rjmp	.+22     	; 0x76a <api_frame_decode+0x24e>
 754:	8b ee       	ldi	r24, 0xEB	; 235
 756:	96 e0       	ldi	r25, 0x06	; 6
 758:	08 c0       	rjmp	.+16     	; 0x76a <api_frame_decode+0x24e>
		if ( (0xFF & (checksum)) == 0xFF )
		{
		    // check frame type
			switch ( *(frame+API_TYPE) )
			{
				case XBEE_CMD:				return "Type:\tAT Command Frame\r\n";						break;
 75a:	88 e0       	ldi	r24, 0x08	; 8
 75c:	91 e0       	ldi	r25, 0x01	; 1
 75e:	05 c0       	rjmp	.+10     	; 0x76a <api_frame_decode+0x24e>
				case XBEE_CMD_RESPONSE:		return "Type:\tAT Command Response Frame\r\n";				break;
				
				case XBEE_MODEM_STATUS:
					switch ( *(frame+API_STATUS) )
					{
						case STATUS_HW_RST:         return "Modem:\tHardware reset\r\n";				break;
 760:	8c e3       	ldi	r24, 0x3C	; 60
 762:	92 e0       	ldi	r25, 0x02	; 2
 764:	02 c0       	rjmp	.+4      	; 0x76a <api_frame_decode+0x24e>
					break;
					
				case XBEE_XMIT_STATUS:
					switch( *(frame+API_XMIT_STATUS) )
					{
						case STATUS_SUCCESS:		return "Xmit:\tSuccessful\r\n";						break;
 766:	8c e6       	ldi	r24, 0x6C	; 108
 768:	93 e0       	ldi	r25, 0x03	; 3
	}
	else { return "ERROR: invalid start\r\n"; }
		
	return "ERROR\r\n";
	
 76a:	1f 91       	pop	r17
 76c:	0f 91       	pop	r16
 76e:	08 95       	ret

00000770 <__vector_18>:
#include "../../io/mcu_io.h"

char spi_miso_buf[64];

ISR(USART_RX_vect)
{
 770:	1f 92       	push	r1
 772:	0f 92       	push	r0
 774:	0f b6       	in	r0, 0x3f	; 63
 776:	0f 92       	push	r0
 778:	11 24       	eor	r1, r1
 77a:	1f 93       	push	r17
 77c:	2f 93       	push	r18
 77e:	3f 93       	push	r19
 780:	4f 93       	push	r20
 782:	5f 93       	push	r21
 784:	6f 93       	push	r22
 786:	7f 93       	push	r23
 788:	8f 93       	push	r24
 78a:	9f 93       	push	r25
 78c:	af 93       	push	r26
 78e:	bf 93       	push	r27
 790:	ef 93       	push	r30
 792:	ff 93       	push	r31
 794:	cf 93       	push	r28
 796:	df 93       	push	r29
 798:	00 d0       	rcall	.+0      	; 0x79a <__vector_18+0x2a>
 79a:	1f 92       	push	r1
 79c:	cd b7       	in	r28, 0x3d	; 61
 79e:	de b7       	in	r29, 0x3e	; 62
	char rxdata = (char)getByte();
 7a0:	0e 94 67 02 	call	0x4ce	; 0x4ce <getByte>
 7a4:	18 2f       	mov	r17, r24
	char rfTX[3] = {rxdata,'\r','\n'};
 7a6:	89 83       	std	Y+1, r24	; 0x01
 7a8:	8d e0       	ldi	r24, 0x0D	; 13
 7aa:	8a 83       	std	Y+2, r24	; 0x02
 7ac:	8a e0       	ldi	r24, 0x0A	; 10
 7ae:	8b 83       	std	Y+3, r24	; 0x03
		
	spi_xmit_api_string(rfTX);
 7b0:	ce 01       	movw	r24, r28
 7b2:	01 96       	adiw	r24, 0x01	; 1
 7b4:	0e 94 97 01 	call	0x32e	; 0x32e <spi_xmit_api_string>
	putByte(rxdata);
 7b8:	81 2f       	mov	r24, r17
 7ba:	0e 94 6f 02 	call	0x4de	; 0x4de <putByte>
}
 7be:	0f 90       	pop	r0
 7c0:	0f 90       	pop	r0
 7c2:	0f 90       	pop	r0
 7c4:	df 91       	pop	r29
 7c6:	cf 91       	pop	r28
 7c8:	ff 91       	pop	r31
 7ca:	ef 91       	pop	r30
 7cc:	bf 91       	pop	r27
 7ce:	af 91       	pop	r26
 7d0:	9f 91       	pop	r25
 7d2:	8f 91       	pop	r24
 7d4:	7f 91       	pop	r23
 7d6:	6f 91       	pop	r22
 7d8:	5f 91       	pop	r21
 7da:	4f 91       	pop	r20
 7dc:	3f 91       	pop	r19
 7de:	2f 91       	pop	r18
 7e0:	1f 91       	pop	r17
 7e2:	0f 90       	pop	r0
 7e4:	0f be       	out	0x3f, r0	; 63
 7e6:	0f 90       	pop	r0
 7e8:	1f 90       	pop	r1
 7ea:	18 95       	reti

000007ec <main>:

int main(void)
{
	// enable all interrupts
	sei();
 7ec:	78 94       	sei
	
	// enable uart interrupt
	RX_INTEN();
 7ee:	e1 ec       	ldi	r30, 0xC1	; 193
 7f0:	f0 e0       	ldi	r31, 0x00	; 0
 7f2:	80 81       	ld	r24, Z
 7f4:	80 68       	ori	r24, 0x80	; 128
 7f6:	80 83       	st	Z, r24
	
	// initialize UART interface
	initUART();
 7f8:	0e 94 54 02 	call	0x4a8	; 0x4a8 <initUART>
	
    // initialize SPI as master
	spi_master_init();
 7fc:	0e 94 6f 01 	call	0x2de	; 0x2de <spi_master_init>
	
	// initialize XBee to SPI mode
	xbee_config_spi();
 800:	0e 94 86 02 	call	0x50c	; 0x50c <xbee_config_spi>
	
	spi_read();
 804:	0e 94 28 02 	call	0x450	; 0x450 <spi_read>
    {
		// transmit to xbee
		//spi_xmit_api_string("Hello world!\r\n");
		//writeString(api_frame_decode(spi_miso_buf));
		
		if (SPI_ATTN_N_LOW)
 808:	19 99       	sbic	0x03, 1	; 3
 80a:	06 c0       	rjmp	.+12     	; 0x818 <main+0x2c>
		{
			writeString(api_frame_decode(spi_read()));
 80c:	0e 94 28 02 	call	0x450	; 0x450 <spi_read>
 810:	0e 94 8e 02 	call	0x51c	; 0x51c <api_frame_decode>
 814:	0e 94 77 02 	call	0x4ee	; 0x4ee <writeString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 818:	87 ea       	ldi	r24, 0xA7	; 167
 81a:	91 e6       	ldi	r25, 0x61	; 97
 81c:	01 97       	sbiw	r24, 0x01	; 1
 81e:	f1 f7       	brne	.-4      	; 0x81c <main+0x30>
 820:	00 c0       	rjmp	.+0      	; 0x822 <main+0x36>
 822:	00 00       	nop
 824:	f1 cf       	rjmp	.-30     	; 0x808 <main+0x1c>

00000826 <__tablejump2__>:
 826:	ee 0f       	add	r30, r30
 828:	ff 1f       	adc	r31, r31
 82a:	05 90       	lpm	r0, Z+
 82c:	f4 91       	lpm	r31, Z
 82e:	e0 2d       	mov	r30, r0
 830:	09 94       	ijmp

00000832 <_exit>:
 832:	f8 94       	cli

00000834 <__stop_program>:
 834:	ff cf       	rjmp	.-2      	; 0x834 <__stop_program>
